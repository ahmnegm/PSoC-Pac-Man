ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"VERT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	VERT_initVar
  20              		.bss
  21              		.type	VERT_initVar, %object
  22              		.size	VERT_initVar, 1
  23              	VERT_initVar:
  24 0000 00       		.space	1
  25              		.section	.text.VERT_Start,"ax",%progbits
  26              		.align	2
  27              		.global	VERT_Start
  28              		.thumb
  29              		.thumb_func
  30              		.type	VERT_Start, %function
  31              	VERT_Start:
  32              	.LFB0:
  33              		.file 1 "Generated_Source\\PSoC5\\VERT.c"
   1:Generated_Source\PSoC5/VERT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/VERT.c **** * File Name: VERT.c
   3:Generated_Source\PSoC5/VERT.c **** * Version 3.30
   4:Generated_Source\PSoC5/VERT.c **** *
   5:Generated_Source\PSoC5/VERT.c **** * Description:
   6:Generated_Source\PSoC5/VERT.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/VERT.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/VERT.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/VERT.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/VERT.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/VERT.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/VERT.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/VERT.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/VERT.c **** *
  15:Generated_Source\PSoC5/VERT.c **** * Note:
  16:Generated_Source\PSoC5/VERT.c **** *
  17:Generated_Source\PSoC5/VERT.c **** *******************************************************************************
  18:Generated_Source\PSoC5/VERT.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/VERT.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/VERT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/VERT.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/VERT.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/VERT.c **** 
  24:Generated_Source\PSoC5/VERT.c **** #include "VERT.h"
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 2


  25:Generated_Source\PSoC5/VERT.c **** 
  26:Generated_Source\PSoC5/VERT.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/VERT.c **** #ifdef VERT_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/VERT.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/VERT.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/VERT.c **** #endif /* VERT_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:Generated_Source\PSoC5/VERT.c **** 
  32:Generated_Source\PSoC5/VERT.c **** uint8 VERT_initVar = 0u;
  33:Generated_Source\PSoC5/VERT.c **** 
  34:Generated_Source\PSoC5/VERT.c **** 
  35:Generated_Source\PSoC5/VERT.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/VERT.c **** * Function Name: VERT_Start
  37:Generated_Source\PSoC5/VERT.c **** ********************************************************************************
  38:Generated_Source\PSoC5/VERT.c **** *
  39:Generated_Source\PSoC5/VERT.c **** * Summary:
  40:Generated_Source\PSoC5/VERT.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/VERT.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/VERT.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/VERT.c **** *
  44:Generated_Source\PSoC5/VERT.c **** * Parameters:
  45:Generated_Source\PSoC5/VERT.c **** *  None
  46:Generated_Source\PSoC5/VERT.c **** *
  47:Generated_Source\PSoC5/VERT.c **** * Return:
  48:Generated_Source\PSoC5/VERT.c **** *  None
  49:Generated_Source\PSoC5/VERT.c **** *
  50:Generated_Source\PSoC5/VERT.c **** * Global variables:
  51:Generated_Source\PSoC5/VERT.c **** *  VERT_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/VERT.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/VERT.c **** *
  54:Generated_Source\PSoC5/VERT.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/VERT.c **** void VERT_Start(void) 
  56:Generated_Source\PSoC5/VERT.c **** {
  34              		.loc 1 56 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
  57:Generated_Source\PSoC5/VERT.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/VERT.c ****     if(VERT_initVar == 0u)
  44              		.loc 1 58 0
  45 0004 064B     		ldr	r3, .L3
  46 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  47 0008 002B     		cmp	r3, #0
  48 000a 04D1     		bne	.L2
  59:Generated_Source\PSoC5/VERT.c ****     {
  60:Generated_Source\PSoC5/VERT.c ****         VERT_Init();
  49              		.loc 1 60 0
  50 000c FFF7FEFF 		bl	VERT_Init
  61:Generated_Source\PSoC5/VERT.c ****         VERT_initVar = 1u;
  51              		.loc 1 61 0
  52 0010 034B     		ldr	r3, .L3
  53 0012 0122     		movs	r2, #1
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 3


  54 0014 1A70     		strb	r2, [r3]
  55              	.L2:
  62:Generated_Source\PSoC5/VERT.c ****     }
  63:Generated_Source\PSoC5/VERT.c ****     VERT_Enable();
  56              		.loc 1 63 0
  57 0016 FFF7FEFF 		bl	VERT_Enable
  64:Generated_Source\PSoC5/VERT.c **** 
  65:Generated_Source\PSoC5/VERT.c **** }
  58              		.loc 1 65 0
  59 001a 00BF     		nop
  60 001c 80BD     		pop	{r7, pc}
  61              	.L4:
  62 001e 00BF     		.align	2
  63              	.L3:
  64 0020 00000000 		.word	VERT_initVar
  65              		.cfi_endproc
  66              	.LFE0:
  67              		.size	VERT_Start, .-VERT_Start
  68              		.section	.text.VERT_Init,"ax",%progbits
  69              		.align	2
  70              		.global	VERT_Init
  71              		.thumb
  72              		.thumb_func
  73              		.type	VERT_Init, %function
  74              	VERT_Init:
  75              	.LFB1:
  66:Generated_Source\PSoC5/VERT.c **** 
  67:Generated_Source\PSoC5/VERT.c **** 
  68:Generated_Source\PSoC5/VERT.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/VERT.c **** * Function Name: VERT_Init
  70:Generated_Source\PSoC5/VERT.c **** ********************************************************************************
  71:Generated_Source\PSoC5/VERT.c **** *
  72:Generated_Source\PSoC5/VERT.c **** * Summary:
  73:Generated_Source\PSoC5/VERT.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/VERT.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/VERT.c **** *  VERT_Start().
  76:Generated_Source\PSoC5/VERT.c **** *
  77:Generated_Source\PSoC5/VERT.c **** * Parameters:
  78:Generated_Source\PSoC5/VERT.c **** *  None
  79:Generated_Source\PSoC5/VERT.c **** *
  80:Generated_Source\PSoC5/VERT.c **** * Return:
  81:Generated_Source\PSoC5/VERT.c **** *  None
  82:Generated_Source\PSoC5/VERT.c **** *
  83:Generated_Source\PSoC5/VERT.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/VERT.c **** void VERT_Init(void) 
  85:Generated_Source\PSoC5/VERT.c **** {
  76              		.loc 1 85 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 8
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 7, -8
  83              		.cfi_offset 14, -4
  84 0002 82B0     		sub	sp, sp, #8
  85              		.cfi_def_cfa_offset 16
  86 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 4


  87              		.cfi_def_cfa_register 7
  86:Generated_Source\PSoC5/VERT.c ****     #if (VERT_UsingFixedFunction || VERT_UseControl)
  87:Generated_Source\PSoC5/VERT.c ****         uint8 ctrl;
  88:Generated_Source\PSoC5/VERT.c ****     #endif /* (VERT_UsingFixedFunction || VERT_UseControl) */
  89:Generated_Source\PSoC5/VERT.c **** 
  90:Generated_Source\PSoC5/VERT.c ****     #if(!VERT_UsingFixedFunction)
  91:Generated_Source\PSoC5/VERT.c ****         #if(VERT_UseStatus)
  92:Generated_Source\PSoC5/VERT.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/VERT.c ****             uint8 VERT_interruptState;
  94:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_UseStatus) */
  95:Generated_Source\PSoC5/VERT.c ****     #endif /* (!VERT_UsingFixedFunction) */
  96:Generated_Source\PSoC5/VERT.c **** 
  97:Generated_Source\PSoC5/VERT.c ****     #if (VERT_UsingFixedFunction)
  98:Generated_Source\PSoC5/VERT.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/VERT.c ****         VERT_CONTROL |= VERT_CFG0_MODE;
 100:Generated_Source\PSoC5/VERT.c ****         #if (VERT_DeadBand2_4)
 101:Generated_Source\PSoC5/VERT.c ****             VERT_CONTROL |= VERT_CFG0_DB;
 102:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_DeadBand2_4) */
 103:Generated_Source\PSoC5/VERT.c **** 
 104:Generated_Source\PSoC5/VERT.c ****         ctrl = VERT_CONTROL3 & ((uint8 )(~VERT_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/VERT.c ****         VERT_CONTROL3 = ctrl | VERT_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/VERT.c **** 
 107:Generated_Source\PSoC5/VERT.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/VERT.c ****         VERT_RT1 &= ((uint8)(~VERT_RT1_MASK));
 109:Generated_Source\PSoC5/VERT.c ****         VERT_RT1 |= VERT_SYNC;
 110:Generated_Source\PSoC5/VERT.c **** 
 111:Generated_Source\PSoC5/VERT.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/VERT.c ****         VERT_RT1 &= ((uint8)(~VERT_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/VERT.c ****         VERT_RT1 |= VERT_SYNCDSI_EN;
 114:Generated_Source\PSoC5/VERT.c **** 
 115:Generated_Source\PSoC5/VERT.c ****     #elif (VERT_UseControl)
 116:Generated_Source\PSoC5/VERT.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/VERT.c ****         ctrl = VERT_CONTROL & ((uint8)(~VERT_CTRL_CMPMODE2_MASK)) &
  88              		.loc 1 117 0
  89 0006 154B     		ldr	r3, .L6
  90 0008 1B78     		ldrb	r3, [r3]
  91 000a DBB2     		uxtb	r3, r3
  92 000c 23F03F03 		bic	r3, r3, #63
  93 0010 FB71     		strb	r3, [r7, #7]
 118:Generated_Source\PSoC5/VERT.c ****                 ((uint8)(~VERT_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/VERT.c ****         VERT_CONTROL = ctrl | VERT_DEFAULT_COMPARE2_MODE |
  94              		.loc 1 119 0
  95 0012 124A     		ldr	r2, .L6
  96 0014 FB79     		ldrb	r3, [r7, #7]
  97 0016 43F02103 		orr	r3, r3, #33
  98 001a DBB2     		uxtb	r3, r3
  99 001c 1370     		strb	r3, [r2]
 120:Generated_Source\PSoC5/VERT.c ****                                    VERT_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/VERT.c ****     #endif /* (VERT_UsingFixedFunction) */
 122:Generated_Source\PSoC5/VERT.c **** 
 123:Generated_Source\PSoC5/VERT.c ****     #if (!VERT_UsingFixedFunction)
 124:Generated_Source\PSoC5/VERT.c ****         #if (VERT_Resolution == 8)
 125:Generated_Source\PSoC5/VERT.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/VERT.c ****             VERT_AUX_CONTROLDP0 |= (VERT_AUX_CTRL_FIFO0_CLR);
 127:Generated_Source\PSoC5/VERT.c ****         #else /* (VERT_Resolution == 16)*/
 128:Generated_Source\PSoC5/VERT.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/VERT.c ****             VERT_AUX_CONTROLDP0 |= (VERT_AUX_CTRL_FIFO0_CLR);
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 5


 100              		.loc 1 129 0
 101 001e 104A     		ldr	r2, .L6+4
 102 0020 0F4B     		ldr	r3, .L6+4
 103 0022 1B78     		ldrb	r3, [r3]
 104 0024 DBB2     		uxtb	r3, r3
 105 0026 43F00103 		orr	r3, r3, #1
 106 002a DBB2     		uxtb	r3, r3
 107 002c 1370     		strb	r3, [r2]
 130:Generated_Source\PSoC5/VERT.c ****             VERT_AUX_CONTROLDP1 |= (VERT_AUX_CTRL_FIFO0_CLR);
 108              		.loc 1 130 0
 109 002e 0D4A     		ldr	r2, .L6+8
 110 0030 0C4B     		ldr	r3, .L6+8
 111 0032 1B78     		ldrb	r3, [r3]
 112 0034 DBB2     		uxtb	r3, r3
 113 0036 43F00103 		orr	r3, r3, #1
 114 003a DBB2     		uxtb	r3, r3
 115 003c 1370     		strb	r3, [r2]
 131:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_Resolution == 8) */
 132:Generated_Source\PSoC5/VERT.c **** 
 133:Generated_Source\PSoC5/VERT.c ****         VERT_WriteCounter(VERT_INIT_PERIOD_VALUE);
 116              		.loc 1 133 0
 117 003e 40F22530 		movw	r0, #805
 118 0042 FFF7FEFF 		bl	VERT_WriteCounter
 134:Generated_Source\PSoC5/VERT.c ****     #endif /* (!VERT_UsingFixedFunction) */
 135:Generated_Source\PSoC5/VERT.c **** 
 136:Generated_Source\PSoC5/VERT.c ****     VERT_WritePeriod(VERT_INIT_PERIOD_VALUE);
 119              		.loc 1 136 0
 120 0046 40F22530 		movw	r0, #805
 121 004a FFF7FEFF 		bl	VERT_WritePeriod
 137:Generated_Source\PSoC5/VERT.c **** 
 138:Generated_Source\PSoC5/VERT.c ****         #if (VERT_UseOneCompareMode)
 139:Generated_Source\PSoC5/VERT.c ****             VERT_WriteCompare(VERT_INIT_COMPARE_VALUE1);
 122              		.loc 1 139 0
 123 004e 2620     		movs	r0, #38
 124 0050 FFF7FEFF 		bl	VERT_WriteCompare
 140:Generated_Source\PSoC5/VERT.c ****         #else
 141:Generated_Source\PSoC5/VERT.c ****             VERT_WriteCompare1(VERT_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/VERT.c ****             VERT_WriteCompare2(VERT_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_UseOneCompareMode) */
 144:Generated_Source\PSoC5/VERT.c **** 
 145:Generated_Source\PSoC5/VERT.c ****         #if (VERT_KillModeMinTime)
 146:Generated_Source\PSoC5/VERT.c ****             VERT_WriteKillTime(VERT_MinimumKillTime);
 147:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_KillModeMinTime) */
 148:Generated_Source\PSoC5/VERT.c **** 
 149:Generated_Source\PSoC5/VERT.c ****         #if (VERT_DeadBandUsed)
 150:Generated_Source\PSoC5/VERT.c ****             VERT_WriteDeadTime(VERT_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_DeadBandUsed) */
 152:Generated_Source\PSoC5/VERT.c **** 
 153:Generated_Source\PSoC5/VERT.c ****     #if (VERT_UseStatus || VERT_UsingFixedFunction)
 154:Generated_Source\PSoC5/VERT.c ****         VERT_SetInterruptMode(VERT_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/VERT.c ****     #endif /* (VERT_UseStatus || VERT_UsingFixedFunction) */
 156:Generated_Source\PSoC5/VERT.c **** 
 157:Generated_Source\PSoC5/VERT.c ****     #if (VERT_UsingFixedFunction)
 158:Generated_Source\PSoC5/VERT.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/VERT.c ****         VERT_GLOBAL_ENABLE |= VERT_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/VERT.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/VERT.c ****         VERT_CONTROL2 |= VERT_CTRL2_IRQ_SEL;
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 6


 162:Generated_Source\PSoC5/VERT.c ****     #else
 163:Generated_Source\PSoC5/VERT.c ****         #if(VERT_UseStatus)
 164:Generated_Source\PSoC5/VERT.c **** 
 165:Generated_Source\PSoC5/VERT.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/VERT.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/VERT.c ****             VERT_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/VERT.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/VERT.c ****             VERT_STATUS_AUX_CTRL |= VERT_STATUS_ACTL_INT_EN_MASK;
 170:Generated_Source\PSoC5/VERT.c **** 
 171:Generated_Source\PSoC5/VERT.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/VERT.c ****             CyExitCriticalSection(VERT_interruptState);
 173:Generated_Source\PSoC5/VERT.c **** 
 174:Generated_Source\PSoC5/VERT.c ****             /* Clear the FIFO to enable the VERT_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/VERT.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/VERT.c ****             VERT_ClearFIFO();
 177:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_UseStatus) */
 178:Generated_Source\PSoC5/VERT.c ****     #endif /* (VERT_UsingFixedFunction) */
 179:Generated_Source\PSoC5/VERT.c **** }
 125              		.loc 1 179 0
 126 0054 00BF     		nop
 127 0056 0837     		adds	r7, r7, #8
 128              		.cfi_def_cfa_offset 8
 129 0058 BD46     		mov	sp, r7
 130              		.cfi_def_cfa_register 13
 131              		@ sp needed
 132 005a 80BD     		pop	{r7, pc}
 133              	.L7:
 134              		.align	2
 135              	.L6:
 136 005c 74650040 		.word	1073767796
 137 0060 9A650040 		.word	1073767834
 138 0064 9B650040 		.word	1073767835
 139              		.cfi_endproc
 140              	.LFE1:
 141              		.size	VERT_Init, .-VERT_Init
 142              		.section	.text.VERT_Enable,"ax",%progbits
 143              		.align	2
 144              		.global	VERT_Enable
 145              		.thumb
 146              		.thumb_func
 147              		.type	VERT_Enable, %function
 148              	VERT_Enable:
 149              	.LFB2:
 180:Generated_Source\PSoC5/VERT.c **** 
 181:Generated_Source\PSoC5/VERT.c **** 
 182:Generated_Source\PSoC5/VERT.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/VERT.c **** * Function Name: VERT_Enable
 184:Generated_Source\PSoC5/VERT.c **** ********************************************************************************
 185:Generated_Source\PSoC5/VERT.c **** *
 186:Generated_Source\PSoC5/VERT.c **** * Summary:
 187:Generated_Source\PSoC5/VERT.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/VERT.c **** *
 189:Generated_Source\PSoC5/VERT.c **** * Parameters:
 190:Generated_Source\PSoC5/VERT.c **** *  None
 191:Generated_Source\PSoC5/VERT.c **** *
 192:Generated_Source\PSoC5/VERT.c **** * Return:
 193:Generated_Source\PSoC5/VERT.c **** *  None
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 7


 194:Generated_Source\PSoC5/VERT.c **** *
 195:Generated_Source\PSoC5/VERT.c **** * Side Effects:
 196:Generated_Source\PSoC5/VERT.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/VERT.c **** *
 198:Generated_Source\PSoC5/VERT.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/VERT.c **** void VERT_Enable(void) 
 200:Generated_Source\PSoC5/VERT.c **** {
 150              		.loc 1 200 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155 0000 80B4     		push	{r7}
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 7, -4
 158 0002 00AF     		add	r7, sp, #0
 159              		.cfi_def_cfa_register 7
 201:Generated_Source\PSoC5/VERT.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/VERT.c ****     #if (VERT_UsingFixedFunction)
 203:Generated_Source\PSoC5/VERT.c ****         VERT_GLOBAL_ENABLE |= VERT_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/VERT.c ****         VERT_GLOBAL_STBY_ENABLE |= VERT_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/VERT.c ****     #endif /* (VERT_UsingFixedFunction) */
 206:Generated_Source\PSoC5/VERT.c **** 
 207:Generated_Source\PSoC5/VERT.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/VERT.c ****     #if (VERT_UseControl || VERT_UsingFixedFunction)
 209:Generated_Source\PSoC5/VERT.c ****         VERT_CONTROL |= VERT_CTRL_ENABLE;
 160              		.loc 1 209 0
 161 0004 054A     		ldr	r2, .L9
 162 0006 054B     		ldr	r3, .L9
 163 0008 1B78     		ldrb	r3, [r3]
 164 000a DBB2     		uxtb	r3, r3
 165 000c 63F07F03 		orn	r3, r3, #127
 166 0010 DBB2     		uxtb	r3, r3
 167 0012 1370     		strb	r3, [r2]
 210:Generated_Source\PSoC5/VERT.c ****     #endif /* (VERT_UseControl || VERT_UsingFixedFunction) */
 211:Generated_Source\PSoC5/VERT.c **** }
 168              		.loc 1 211 0
 169 0014 00BF     		nop
 170 0016 BD46     		mov	sp, r7
 171              		.cfi_def_cfa_register 13
 172              		@ sp needed
 173 0018 80BC     		pop	{r7}
 174              		.cfi_restore 7
 175              		.cfi_def_cfa_offset 0
 176 001a 7047     		bx	lr
 177              	.L10:
 178              		.align	2
 179              	.L9:
 180 001c 74650040 		.word	1073767796
 181              		.cfi_endproc
 182              	.LFE2:
 183              		.size	VERT_Enable, .-VERT_Enable
 184              		.section	.text.VERT_Stop,"ax",%progbits
 185              		.align	2
 186              		.global	VERT_Stop
 187              		.thumb
 188              		.thumb_func
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 8


 189              		.type	VERT_Stop, %function
 190              	VERT_Stop:
 191              	.LFB3:
 212:Generated_Source\PSoC5/VERT.c **** 
 213:Generated_Source\PSoC5/VERT.c **** 
 214:Generated_Source\PSoC5/VERT.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/VERT.c **** * Function Name: VERT_Stop
 216:Generated_Source\PSoC5/VERT.c **** ********************************************************************************
 217:Generated_Source\PSoC5/VERT.c **** *
 218:Generated_Source\PSoC5/VERT.c **** * Summary:
 219:Generated_Source\PSoC5/VERT.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/VERT.c **** *  interrupts.
 221:Generated_Source\PSoC5/VERT.c **** *
 222:Generated_Source\PSoC5/VERT.c **** * Parameters:
 223:Generated_Source\PSoC5/VERT.c **** *  None
 224:Generated_Source\PSoC5/VERT.c **** *
 225:Generated_Source\PSoC5/VERT.c **** * Return:
 226:Generated_Source\PSoC5/VERT.c **** *  None
 227:Generated_Source\PSoC5/VERT.c **** *
 228:Generated_Source\PSoC5/VERT.c **** * Side Effects:
 229:Generated_Source\PSoC5/VERT.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/VERT.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/VERT.c **** *
 232:Generated_Source\PSoC5/VERT.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/VERT.c **** void VERT_Stop(void) 
 234:Generated_Source\PSoC5/VERT.c **** {
 192              		.loc 1 234 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 1, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 197 0000 80B4     		push	{r7}
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 7, -4
 200 0002 00AF     		add	r7, sp, #0
 201              		.cfi_def_cfa_register 7
 235:Generated_Source\PSoC5/VERT.c ****     #if (VERT_UseControl || VERT_UsingFixedFunction)
 236:Generated_Source\PSoC5/VERT.c ****         VERT_CONTROL &= ((uint8)(~VERT_CTRL_ENABLE));
 202              		.loc 1 236 0
 203 0004 054A     		ldr	r2, .L12
 204 0006 054B     		ldr	r3, .L12
 205 0008 1B78     		ldrb	r3, [r3]
 206 000a DBB2     		uxtb	r3, r3
 207 000c 03F07F03 		and	r3, r3, #127
 208 0010 DBB2     		uxtb	r3, r3
 209 0012 1370     		strb	r3, [r2]
 237:Generated_Source\PSoC5/VERT.c ****     #endif /* (VERT_UseControl || VERT_UsingFixedFunction) */
 238:Generated_Source\PSoC5/VERT.c **** 
 239:Generated_Source\PSoC5/VERT.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/VERT.c ****     #if (VERT_UsingFixedFunction)
 241:Generated_Source\PSoC5/VERT.c ****         VERT_GLOBAL_ENABLE &= ((uint8)(~VERT_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/VERT.c ****         VERT_GLOBAL_STBY_ENABLE &= ((uint8)(~VERT_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/VERT.c ****     #endif /* (VERT_UsingFixedFunction) */
 244:Generated_Source\PSoC5/VERT.c **** }
 210              		.loc 1 244 0
 211 0014 00BF     		nop
 212 0016 BD46     		mov	sp, r7
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 9


 213              		.cfi_def_cfa_register 13
 214              		@ sp needed
 215 0018 80BC     		pop	{r7}
 216              		.cfi_restore 7
 217              		.cfi_def_cfa_offset 0
 218 001a 7047     		bx	lr
 219              	.L13:
 220              		.align	2
 221              	.L12:
 222 001c 74650040 		.word	1073767796
 223              		.cfi_endproc
 224              	.LFE3:
 225              		.size	VERT_Stop, .-VERT_Stop
 226              		.section	.text.VERT_WriteCounter,"ax",%progbits
 227              		.align	2
 228              		.global	VERT_WriteCounter
 229              		.thumb
 230              		.thumb_func
 231              		.type	VERT_WriteCounter, %function
 232              	VERT_WriteCounter:
 233              	.LFB4:
 245:Generated_Source\PSoC5/VERT.c **** 
 246:Generated_Source\PSoC5/VERT.c **** #if (VERT_UseOneCompareMode)
 247:Generated_Source\PSoC5/VERT.c ****     #if (VERT_CompareMode1SW)
 248:Generated_Source\PSoC5/VERT.c **** 
 249:Generated_Source\PSoC5/VERT.c **** 
 250:Generated_Source\PSoC5/VERT.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/VERT.c ****         * Function Name: VERT_SetCompareMode
 252:Generated_Source\PSoC5/VERT.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/VERT.c ****         *
 254:Generated_Source\PSoC5/VERT.c ****         * Summary:
 255:Generated_Source\PSoC5/VERT.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/VERT.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/VERT.c ****         *
 258:Generated_Source\PSoC5/VERT.c ****         * Parameters:
 259:Generated_Source\PSoC5/VERT.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/VERT.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/VERT.c ****         *
 262:Generated_Source\PSoC5/VERT.c ****         * Return:
 263:Generated_Source\PSoC5/VERT.c ****         *  None
 264:Generated_Source\PSoC5/VERT.c ****         *
 265:Generated_Source\PSoC5/VERT.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/VERT.c ****         void VERT_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/VERT.c ****         {
 268:Generated_Source\PSoC5/VERT.c ****             #if(VERT_UsingFixedFunction)
 269:Generated_Source\PSoC5/VERT.c **** 
 270:Generated_Source\PSoC5/VERT.c ****                 #if(0 != VERT_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/VERT.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << VERT_CTRL_CMPMODE1_SHI
 272:Generated_Source\PSoC5/VERT.c ****                 #else
 273:Generated_Source\PSoC5/VERT.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/VERT.c ****                 #endif /* (0 != VERT_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/VERT.c **** 
 276:Generated_Source\PSoC5/VERT.c ****                 VERT_CONTROL3 &= ((uint8)(~VERT_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:Generated_Source\PSoC5/VERT.c ****                 VERT_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/VERT.c **** 
 279:Generated_Source\PSoC5/VERT.c ****             #elif (VERT_UseControl)
 280:Generated_Source\PSoC5/VERT.c **** 
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 10


 281:Generated_Source\PSoC5/VERT.c ****                 #if(0 != VERT_CTRL_CMPMODE1_SHIFT)
 282:Generated_Source\PSoC5/VERT.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << VERT_CTRL_CMPMODE1_SH
 283:Generated_Source\PSoC5/VERT.c ****                                                 VERT_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/VERT.c ****                 #else
 285:Generated_Source\PSoC5/VERT.c ****                     uint8 comparemode1masked = comparemode & VERT_CTRL_CMPMODE1_MASK;
 286:Generated_Source\PSoC5/VERT.c ****                 #endif /* (0 != VERT_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/VERT.c **** 
 288:Generated_Source\PSoC5/VERT.c ****                 #if(0 != VERT_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/VERT.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << VERT_CTRL_CMPMODE2_SH
 290:Generated_Source\PSoC5/VERT.c ****                                                VERT_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/VERT.c ****                 #else
 292:Generated_Source\PSoC5/VERT.c ****                     uint8 comparemode2masked = comparemode & VERT_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/VERT.c ****                 #endif /* (0 != VERT_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/VERT.c **** 
 295:Generated_Source\PSoC5/VERT.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/VERT.c ****                 VERT_CONTROL &= ((uint8)(~(VERT_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/VERT.c ****                                             VERT_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/VERT.c ****                 VERT_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/VERT.c **** 
 300:Generated_Source\PSoC5/VERT.c ****             #else
 301:Generated_Source\PSoC5/VERT.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/VERT.c ****             #endif /* (VERT_UsingFixedFunction) */
 303:Generated_Source\PSoC5/VERT.c ****         }
 304:Generated_Source\PSoC5/VERT.c ****     #endif /* VERT_CompareMode1SW */
 305:Generated_Source\PSoC5/VERT.c **** 
 306:Generated_Source\PSoC5/VERT.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/VERT.c **** 
 308:Generated_Source\PSoC5/VERT.c ****     #if (VERT_CompareMode1SW)
 309:Generated_Source\PSoC5/VERT.c **** 
 310:Generated_Source\PSoC5/VERT.c **** 
 311:Generated_Source\PSoC5/VERT.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/VERT.c ****         * Function Name: VERT_SetCompareMode1
 313:Generated_Source\PSoC5/VERT.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/VERT.c ****         *
 315:Generated_Source\PSoC5/VERT.c ****         * Summary:
 316:Generated_Source\PSoC5/VERT.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/VERT.c ****         *
 318:Generated_Source\PSoC5/VERT.c ****         * Parameters:
 319:Generated_Source\PSoC5/VERT.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/VERT.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/VERT.c ****         *
 322:Generated_Source\PSoC5/VERT.c ****         * Return:
 323:Generated_Source\PSoC5/VERT.c ****         *  None
 324:Generated_Source\PSoC5/VERT.c ****         *
 325:Generated_Source\PSoC5/VERT.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/VERT.c ****         void VERT_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/VERT.c ****         {
 328:Generated_Source\PSoC5/VERT.c ****             #if(0 != VERT_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/VERT.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << VERT_CTRL_CMPMODE1_SHIFT))
 330:Generated_Source\PSoC5/VERT.c ****                                            VERT_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/VERT.c ****             #else
 332:Generated_Source\PSoC5/VERT.c ****                 uint8 comparemodemasked = comparemode & VERT_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/VERT.c ****             #endif /* (0 != VERT_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/VERT.c **** 
 335:Generated_Source\PSoC5/VERT.c ****             #if (VERT_UseControl)
 336:Generated_Source\PSoC5/VERT.c ****                 VERT_CONTROL &= ((uint8)(~VERT_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:Generated_Source\PSoC5/VERT.c ****                 VERT_CONTROL |= comparemodemasked;
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 11


 338:Generated_Source\PSoC5/VERT.c ****             #endif /* (VERT_UseControl) */
 339:Generated_Source\PSoC5/VERT.c ****         }
 340:Generated_Source\PSoC5/VERT.c ****     #endif /* VERT_CompareMode1SW */
 341:Generated_Source\PSoC5/VERT.c **** 
 342:Generated_Source\PSoC5/VERT.c **** #if (VERT_CompareMode2SW)
 343:Generated_Source\PSoC5/VERT.c **** 
 344:Generated_Source\PSoC5/VERT.c **** 
 345:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_SetCompareMode2
 347:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/VERT.c ****     *
 349:Generated_Source\PSoC5/VERT.c ****     * Summary:
 350:Generated_Source\PSoC5/VERT.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/VERT.c ****     *
 352:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 353:Generated_Source\PSoC5/VERT.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/VERT.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/VERT.c ****     *
 356:Generated_Source\PSoC5/VERT.c ****     * Return:
 357:Generated_Source\PSoC5/VERT.c ****     *  None
 358:Generated_Source\PSoC5/VERT.c ****     *
 359:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/VERT.c ****     void VERT_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/VERT.c ****     {
 362:Generated_Source\PSoC5/VERT.c **** 
 363:Generated_Source\PSoC5/VERT.c ****         #if(0 != VERT_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/VERT.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << VERT_CTRL_CMPMODE2_SHIFT)) &
 365:Generated_Source\PSoC5/VERT.c ****                                                  VERT_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/VERT.c ****         #else
 367:Generated_Source\PSoC5/VERT.c ****             uint8 comparemodemasked = comparemode & VERT_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/VERT.c ****         #endif /* (0 != VERT_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/VERT.c **** 
 370:Generated_Source\PSoC5/VERT.c ****         #if (VERT_UseControl)
 371:Generated_Source\PSoC5/VERT.c ****             VERT_CONTROL &= ((uint8)(~VERT_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/VERT.c ****             VERT_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_UseControl) */
 374:Generated_Source\PSoC5/VERT.c ****     }
 375:Generated_Source\PSoC5/VERT.c ****     #endif /*VERT_CompareMode2SW */
 376:Generated_Source\PSoC5/VERT.c **** 
 377:Generated_Source\PSoC5/VERT.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/VERT.c **** 
 379:Generated_Source\PSoC5/VERT.c **** 
 380:Generated_Source\PSoC5/VERT.c **** #if (!VERT_UsingFixedFunction)
 381:Generated_Source\PSoC5/VERT.c **** 
 382:Generated_Source\PSoC5/VERT.c **** 
 383:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_WriteCounter
 385:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/VERT.c ****     *
 387:Generated_Source\PSoC5/VERT.c ****     * Summary:
 388:Generated_Source\PSoC5/VERT.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/VERT.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/VERT.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/VERT.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/VERT.c ****     *
 393:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 394:Generated_Source\PSoC5/VERT.c ****     *  counter:  The period new period counter value.
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 12


 395:Generated_Source\PSoC5/VERT.c ****     *
 396:Generated_Source\PSoC5/VERT.c ****     * Return:
 397:Generated_Source\PSoC5/VERT.c ****     *  None
 398:Generated_Source\PSoC5/VERT.c ****     *
 399:Generated_Source\PSoC5/VERT.c ****     * Side Effects:
 400:Generated_Source\PSoC5/VERT.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/VERT.c ****     *
 402:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/VERT.c ****     void VERT_WriteCounter(uint16 counter) \
 404:Generated_Source\PSoC5/VERT.c ****                                        
 405:Generated_Source\PSoC5/VERT.c ****     {
 234              		.loc 1 405 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 8
 237              		@ frame_needed = 1, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239 0000 80B4     		push	{r7}
 240              		.cfi_def_cfa_offset 4
 241              		.cfi_offset 7, -4
 242 0002 83B0     		sub	sp, sp, #12
 243              		.cfi_def_cfa_offset 16
 244 0004 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
 246 0006 0346     		mov	r3, r0
 247 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 406:Generated_Source\PSoC5/VERT.c ****         CY_SET_REG16(VERT_COUNTER_LSB_PTR, counter);
 248              		.loc 1 406 0
 249 000a 044A     		ldr	r2, .L15
 250 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 251 000e 1380     		strh	r3, [r2]	@ movhi
 407:Generated_Source\PSoC5/VERT.c ****     }
 252              		.loc 1 407 0
 253 0010 00BF     		nop
 254 0012 0C37     		adds	r7, r7, #12
 255              		.cfi_def_cfa_offset 4
 256 0014 BD46     		mov	sp, r7
 257              		.cfi_def_cfa_register 13
 258              		@ sp needed
 259 0016 80BC     		pop	{r7}
 260              		.cfi_restore 7
 261              		.cfi_def_cfa_offset 0
 262 0018 7047     		bx	lr
 263              	.L16:
 264 001a 00BF     		.align	2
 265              	.L15:
 266 001c 146A0040 		.word	1073768980
 267              		.cfi_endproc
 268              	.LFE4:
 269              		.size	VERT_WriteCounter, .-VERT_WriteCounter
 270              		.section	.text.VERT_ReadCounter,"ax",%progbits
 271              		.align	2
 272              		.global	VERT_ReadCounter
 273              		.thumb
 274              		.thumb_func
 275              		.type	VERT_ReadCounter, %function
 276              	VERT_ReadCounter:
 277              	.LFB5:
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 13


 408:Generated_Source\PSoC5/VERT.c **** 
 409:Generated_Source\PSoC5/VERT.c **** 
 410:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 411:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_ReadCounter
 412:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/VERT.c ****     *
 414:Generated_Source\PSoC5/VERT.c ****     * Summary:
 415:Generated_Source\PSoC5/VERT.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/VERT.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/VERT.c ****     *
 418:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 419:Generated_Source\PSoC5/VERT.c ****     *  None
 420:Generated_Source\PSoC5/VERT.c ****     *
 421:Generated_Source\PSoC5/VERT.c ****     * Return:
 422:Generated_Source\PSoC5/VERT.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/VERT.c ****     *
 424:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/VERT.c ****     uint16 VERT_ReadCounter(void) 
 426:Generated_Source\PSoC5/VERT.c ****     {
 278              		.loc 1 426 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 283 0000 80B4     		push	{r7}
 284              		.cfi_def_cfa_offset 4
 285              		.cfi_offset 7, -4
 286 0002 00AF     		add	r7, sp, #0
 287              		.cfi_def_cfa_register 7
 427:Generated_Source\PSoC5/VERT.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/VERT.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/VERT.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/VERT.c ****           (void)CY_GET_REG8(VERT_COUNTERCAP_LSB_PTR_8BIT);
 288              		.loc 1 430 0
 289 0004 044B     		ldr	r3, .L19
 290 0006 1B78     		ldrb	r3, [r3]
 431:Generated_Source\PSoC5/VERT.c **** 
 432:Generated_Source\PSoC5/VERT.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/VERT.c ****         return (CY_GET_REG16(VERT_CAPTURE_LSB_PTR));
 291              		.loc 1 433 0
 292 0008 044B     		ldr	r3, .L19+4
 293 000a 1B88     		ldrh	r3, [r3]	@ movhi
 294 000c 9BB2     		uxth	r3, r3
 434:Generated_Source\PSoC5/VERT.c ****     }
 295              		.loc 1 434 0
 296 000e 1846     		mov	r0, r3
 297 0010 BD46     		mov	sp, r7
 298              		.cfi_def_cfa_register 13
 299              		@ sp needed
 300 0012 80BC     		pop	{r7}
 301              		.cfi_restore 7
 302              		.cfi_def_cfa_offset 0
 303 0014 7047     		bx	lr
 304              	.L20:
 305 0016 00BF     		.align	2
 306              	.L19:
 307 0018 1A650040 		.word	1073767706
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 14


 308 001c B46A0040 		.word	1073769140
 309              		.cfi_endproc
 310              	.LFE5:
 311              		.size	VERT_ReadCounter, .-VERT_ReadCounter
 312              		.section	.text.VERT_WritePeriod,"ax",%progbits
 313              		.align	2
 314              		.global	VERT_WritePeriod
 315              		.thumb
 316              		.thumb_func
 317              		.type	VERT_WritePeriod, %function
 318              	VERT_WritePeriod:
 319              	.LFB6:
 435:Generated_Source\PSoC5/VERT.c **** 
 436:Generated_Source\PSoC5/VERT.c ****     #if (VERT_UseStatus)
 437:Generated_Source\PSoC5/VERT.c **** 
 438:Generated_Source\PSoC5/VERT.c **** 
 439:Generated_Source\PSoC5/VERT.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/VERT.c ****         * Function Name: VERT_ClearFIFO
 441:Generated_Source\PSoC5/VERT.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/VERT.c ****         *
 443:Generated_Source\PSoC5/VERT.c ****         * Summary:
 444:Generated_Source\PSoC5/VERT.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/VERT.c ****         *
 446:Generated_Source\PSoC5/VERT.c ****         * Parameters:
 447:Generated_Source\PSoC5/VERT.c ****         *  None
 448:Generated_Source\PSoC5/VERT.c ****         *
 449:Generated_Source\PSoC5/VERT.c ****         * Return:
 450:Generated_Source\PSoC5/VERT.c ****         *  None
 451:Generated_Source\PSoC5/VERT.c ****         *
 452:Generated_Source\PSoC5/VERT.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/VERT.c ****         void VERT_ClearFIFO(void) 
 454:Generated_Source\PSoC5/VERT.c ****         {
 455:Generated_Source\PSoC5/VERT.c ****             while(0u != (VERT_ReadStatusRegister() & VERT_STATUS_FIFONEMPTY))
 456:Generated_Source\PSoC5/VERT.c ****             {
 457:Generated_Source\PSoC5/VERT.c ****                 (void)VERT_ReadCapture();
 458:Generated_Source\PSoC5/VERT.c ****             }
 459:Generated_Source\PSoC5/VERT.c ****         }
 460:Generated_Source\PSoC5/VERT.c **** 
 461:Generated_Source\PSoC5/VERT.c ****     #endif /* VERT_UseStatus */
 462:Generated_Source\PSoC5/VERT.c **** 
 463:Generated_Source\PSoC5/VERT.c **** #endif /* !VERT_UsingFixedFunction */
 464:Generated_Source\PSoC5/VERT.c **** 
 465:Generated_Source\PSoC5/VERT.c **** 
 466:Generated_Source\PSoC5/VERT.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/VERT.c **** * Function Name: VERT_WritePeriod
 468:Generated_Source\PSoC5/VERT.c **** ********************************************************************************
 469:Generated_Source\PSoC5/VERT.c **** *
 470:Generated_Source\PSoC5/VERT.c **** * Summary:
 471:Generated_Source\PSoC5/VERT.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/VERT.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/VERT.c **** *
 474:Generated_Source\PSoC5/VERT.c **** * Parameters:
 475:Generated_Source\PSoC5/VERT.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/VERT.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/VERT.c **** *
 478:Generated_Source\PSoC5/VERT.c **** * Return:
 479:Generated_Source\PSoC5/VERT.c **** *  None
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 15


 480:Generated_Source\PSoC5/VERT.c **** *
 481:Generated_Source\PSoC5/VERT.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/VERT.c **** void VERT_WritePeriod(uint16 period) 
 483:Generated_Source\PSoC5/VERT.c **** {
 320              		.loc 1 483 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 8
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324              		@ link register save eliminated.
 325 0000 80B4     		push	{r7}
 326              		.cfi_def_cfa_offset 4
 327              		.cfi_offset 7, -4
 328 0002 83B0     		sub	sp, sp, #12
 329              		.cfi_def_cfa_offset 16
 330 0004 00AF     		add	r7, sp, #0
 331              		.cfi_def_cfa_register 7
 332 0006 0346     		mov	r3, r0
 333 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 484:Generated_Source\PSoC5/VERT.c ****     #if(VERT_UsingFixedFunction)
 485:Generated_Source\PSoC5/VERT.c ****         CY_SET_REG16(VERT_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/VERT.c ****     #else
 487:Generated_Source\PSoC5/VERT.c ****         CY_SET_REG16(VERT_PERIOD_LSB_PTR, period);
 334              		.loc 1 487 0
 335 000a 044A     		ldr	r2, .L22
 336 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 337 000e 1380     		strh	r3, [r2]	@ movhi
 488:Generated_Source\PSoC5/VERT.c ****     #endif /* (VERT_UsingFixedFunction) */
 489:Generated_Source\PSoC5/VERT.c **** }
 338              		.loc 1 489 0
 339 0010 00BF     		nop
 340 0012 0C37     		adds	r7, r7, #12
 341              		.cfi_def_cfa_offset 4
 342 0014 BD46     		mov	sp, r7
 343              		.cfi_def_cfa_register 13
 344              		@ sp needed
 345 0016 80BC     		pop	{r7}
 346              		.cfi_restore 7
 347              		.cfi_def_cfa_offset 0
 348 0018 7047     		bx	lr
 349              	.L23:
 350 001a 00BF     		.align	2
 351              	.L22:
 352 001c 946A0040 		.word	1073769108
 353              		.cfi_endproc
 354              	.LFE6:
 355              		.size	VERT_WritePeriod, .-VERT_WritePeriod
 356              		.section	.text.VERT_WriteCompare,"ax",%progbits
 357              		.align	2
 358              		.global	VERT_WriteCompare
 359              		.thumb
 360              		.thumb_func
 361              		.type	VERT_WriteCompare, %function
 362              	VERT_WriteCompare:
 363              	.LFB7:
 490:Generated_Source\PSoC5/VERT.c **** 
 491:Generated_Source\PSoC5/VERT.c **** #if (VERT_UseOneCompareMode)
 492:Generated_Source\PSoC5/VERT.c **** 
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 16


 493:Generated_Source\PSoC5/VERT.c **** 
 494:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_WriteCompare
 496:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/VERT.c ****     *
 498:Generated_Source\PSoC5/VERT.c ****     * Summary:
 499:Generated_Source\PSoC5/VERT.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/VERT.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/VERT.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/VERT.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/VERT.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/VERT.c ****     *
 505:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 506:Generated_Source\PSoC5/VERT.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/VERT.c ****     *
 508:Generated_Source\PSoC5/VERT.c ****     * Return:
 509:Generated_Source\PSoC5/VERT.c ****     *  None
 510:Generated_Source\PSoC5/VERT.c ****     *
 511:Generated_Source\PSoC5/VERT.c ****     * Side Effects:
 512:Generated_Source\PSoC5/VERT.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/VERT.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/VERT.c ****     *
 515:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/VERT.c ****     void VERT_WriteCompare(uint16 compare) \
 517:Generated_Source\PSoC5/VERT.c ****                                        
 518:Generated_Source\PSoC5/VERT.c ****     {
 364              		.loc 1 518 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 8
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369 0000 80B4     		push	{r7}
 370              		.cfi_def_cfa_offset 4
 371              		.cfi_offset 7, -4
 372 0002 83B0     		sub	sp, sp, #12
 373              		.cfi_def_cfa_offset 16
 374 0004 00AF     		add	r7, sp, #0
 375              		.cfi_def_cfa_register 7
 376 0006 0346     		mov	r3, r0
 377 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 519:Generated_Source\PSoC5/VERT.c ****         #if(VERT_UsingFixedFunction)
 520:Generated_Source\PSoC5/VERT.c ****             CY_SET_REG16(VERT_COMPARE1_LSB_PTR, (uint16)compare);
 521:Generated_Source\PSoC5/VERT.c ****         #else
 522:Generated_Source\PSoC5/VERT.c ****             CY_SET_REG16(VERT_COMPARE1_LSB_PTR, compare);
 378              		.loc 1 522 0
 379 000a 044A     		ldr	r2, .L25
 380 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 381 000e 1380     		strh	r3, [r2]	@ movhi
 523:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_UsingFixedFunction) */
 524:Generated_Source\PSoC5/VERT.c **** 
 525:Generated_Source\PSoC5/VERT.c ****         #if (VERT_PWMMode == VERT__B_PWM__DITHER)
 526:Generated_Source\PSoC5/VERT.c ****             #if(VERT_UsingFixedFunction)
 527:Generated_Source\PSoC5/VERT.c ****                 CY_SET_REG16(VERT_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/VERT.c ****             #else
 529:Generated_Source\PSoC5/VERT.c ****                 CY_SET_REG16(VERT_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/VERT.c ****             #endif /* (VERT_UsingFixedFunction) */
 531:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_PWMMode == VERT__B_PWM__DITHER) */
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 17


 532:Generated_Source\PSoC5/VERT.c ****     }
 382              		.loc 1 532 0
 383 0010 00BF     		nop
 384 0012 0C37     		adds	r7, r7, #12
 385              		.cfi_def_cfa_offset 4
 386 0014 BD46     		mov	sp, r7
 387              		.cfi_def_cfa_register 13
 388              		@ sp needed
 389 0016 80BC     		pop	{r7}
 390              		.cfi_restore 7
 391              		.cfi_def_cfa_offset 0
 392 0018 7047     		bx	lr
 393              	.L26:
 394 001a 00BF     		.align	2
 395              	.L25:
 396 001c 546A0040 		.word	1073769044
 397              		.cfi_endproc
 398              	.LFE7:
 399              		.size	VERT_WriteCompare, .-VERT_WriteCompare
 400              		.section	.text.VERT_ReadControlRegister,"ax",%progbits
 401              		.align	2
 402              		.global	VERT_ReadControlRegister
 403              		.thumb
 404              		.thumb_func
 405              		.type	VERT_ReadControlRegister, %function
 406              	VERT_ReadControlRegister:
 407              	.LFB8:
 533:Generated_Source\PSoC5/VERT.c **** 
 534:Generated_Source\PSoC5/VERT.c **** 
 535:Generated_Source\PSoC5/VERT.c **** #else
 536:Generated_Source\PSoC5/VERT.c **** 
 537:Generated_Source\PSoC5/VERT.c **** 
 538:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_WriteCompare1
 540:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/VERT.c ****     *
 542:Generated_Source\PSoC5/VERT.c ****     * Summary:
 543:Generated_Source\PSoC5/VERT.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/VERT.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/VERT.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/VERT.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/VERT.c ****     *
 548:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 549:Generated_Source\PSoC5/VERT.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/VERT.c ****     *
 551:Generated_Source\PSoC5/VERT.c ****     * Return:
 552:Generated_Source\PSoC5/VERT.c ****     *  None
 553:Generated_Source\PSoC5/VERT.c ****     *
 554:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/VERT.c ****     void VERT_WriteCompare1(uint16 compare) \
 556:Generated_Source\PSoC5/VERT.c ****                                         
 557:Generated_Source\PSoC5/VERT.c ****     {
 558:Generated_Source\PSoC5/VERT.c ****         #if(VERT_UsingFixedFunction)
 559:Generated_Source\PSoC5/VERT.c ****             CY_SET_REG16(VERT_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/VERT.c ****         #else
 561:Generated_Source\PSoC5/VERT.c ****             CY_SET_REG16(VERT_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_UsingFixedFunction) */
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 18


 563:Generated_Source\PSoC5/VERT.c ****     }
 564:Generated_Source\PSoC5/VERT.c **** 
 565:Generated_Source\PSoC5/VERT.c **** 
 566:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_WriteCompare2
 568:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/VERT.c ****     *
 570:Generated_Source\PSoC5/VERT.c ****     * Summary:
 571:Generated_Source\PSoC5/VERT.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/VERT.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/VERT.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/VERT.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/VERT.c ****     *  mode.
 576:Generated_Source\PSoC5/VERT.c ****     *
 577:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 578:Generated_Source\PSoC5/VERT.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/VERT.c ****     *
 580:Generated_Source\PSoC5/VERT.c ****     * Return:
 581:Generated_Source\PSoC5/VERT.c ****     *  None
 582:Generated_Source\PSoC5/VERT.c ****     *
 583:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/VERT.c ****     void VERT_WriteCompare2(uint16 compare) \
 585:Generated_Source\PSoC5/VERT.c ****                                         
 586:Generated_Source\PSoC5/VERT.c ****     {
 587:Generated_Source\PSoC5/VERT.c ****         #if(VERT_UsingFixedFunction)
 588:Generated_Source\PSoC5/VERT.c ****             CY_SET_REG16(VERT_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/VERT.c ****         #else
 590:Generated_Source\PSoC5/VERT.c ****             CY_SET_REG16(VERT_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_UsingFixedFunction) */
 592:Generated_Source\PSoC5/VERT.c ****     }
 593:Generated_Source\PSoC5/VERT.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/VERT.c **** 
 595:Generated_Source\PSoC5/VERT.c **** #if (VERT_DeadBandUsed)
 596:Generated_Source\PSoC5/VERT.c **** 
 597:Generated_Source\PSoC5/VERT.c **** 
 598:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_WriteDeadTime
 600:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/VERT.c ****     *
 602:Generated_Source\PSoC5/VERT.c ****     * Summary:
 603:Generated_Source\PSoC5/VERT.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/VERT.c ****     *
 605:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 606:Generated_Source\PSoC5/VERT.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/VERT.c ****     *
 608:Generated_Source\PSoC5/VERT.c ****     * Return:
 609:Generated_Source\PSoC5/VERT.c ****     *  None
 610:Generated_Source\PSoC5/VERT.c ****     *
 611:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/VERT.c ****     void VERT_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/VERT.c ****     {
 614:Generated_Source\PSoC5/VERT.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/VERT.c ****         #if(!VERT_DeadBand2_4)
 616:Generated_Source\PSoC5/VERT.c ****             CY_SET_REG8(VERT_DEADBAND_COUNT_PTR, deadtime);
 617:Generated_Source\PSoC5/VERT.c ****         #else
 618:Generated_Source\PSoC5/VERT.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/VERT.c ****             /* Clear existing data */
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 19


 620:Generated_Source\PSoC5/VERT.c ****             VERT_DEADBAND_COUNT &= ((uint8)(~VERT_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/VERT.c **** 
 622:Generated_Source\PSoC5/VERT.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/VERT.c ****             #if(VERT_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/VERT.c ****                 VERT_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << VERT_DEADBAND_COUNT_SHIFT)) &
 625:Generated_Source\PSoC5/VERT.c ****                                                     VERT_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/VERT.c ****             #else
 627:Generated_Source\PSoC5/VERT.c ****                 VERT_DEADBAND_COUNT |= deadtime & VERT_DEADBAND_COUNT_MASK;
 628:Generated_Source\PSoC5/VERT.c ****             #endif /* (VERT_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/VERT.c **** 
 630:Generated_Source\PSoC5/VERT.c ****         #endif /* (!VERT_DeadBand2_4) */
 631:Generated_Source\PSoC5/VERT.c ****     }
 632:Generated_Source\PSoC5/VERT.c **** 
 633:Generated_Source\PSoC5/VERT.c **** 
 634:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_ReadDeadTime
 636:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/VERT.c ****     *
 638:Generated_Source\PSoC5/VERT.c ****     * Summary:
 639:Generated_Source\PSoC5/VERT.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/VERT.c ****     *
 641:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 642:Generated_Source\PSoC5/VERT.c ****     *  None
 643:Generated_Source\PSoC5/VERT.c ****     *
 644:Generated_Source\PSoC5/VERT.c ****     * Return:
 645:Generated_Source\PSoC5/VERT.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/VERT.c ****     *
 647:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/VERT.c ****     uint8 VERT_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/VERT.c ****     {
 650:Generated_Source\PSoC5/VERT.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/VERT.c ****         #if(!VERT_DeadBand2_4)
 652:Generated_Source\PSoC5/VERT.c ****             return (CY_GET_REG8(VERT_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/VERT.c ****         #else
 654:Generated_Source\PSoC5/VERT.c **** 
 655:Generated_Source\PSoC5/VERT.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/VERT.c ****             #if(VERT_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/VERT.c ****                 return ((uint8)(((uint8)(VERT_DEADBAND_COUNT & VERT_DEADBAND_COUNT_MASK)) >>
 658:Generated_Source\PSoC5/VERT.c ****                                                                            VERT_DEADBAND_COUNT_SHIF
 659:Generated_Source\PSoC5/VERT.c ****             #else
 660:Generated_Source\PSoC5/VERT.c ****                 return (VERT_DEADBAND_COUNT & VERT_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/VERT.c ****             #endif /* (VERT_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/VERT.c ****         #endif /* (!VERT_DeadBand2_4) */
 663:Generated_Source\PSoC5/VERT.c ****     }
 664:Generated_Source\PSoC5/VERT.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/VERT.c **** 
 666:Generated_Source\PSoC5/VERT.c **** #if (VERT_UseStatus || VERT_UsingFixedFunction)
 667:Generated_Source\PSoC5/VERT.c **** 
 668:Generated_Source\PSoC5/VERT.c **** 
 669:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_SetInterruptMode
 671:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/VERT.c ****     *
 673:Generated_Source\PSoC5/VERT.c ****     * Summary:
 674:Generated_Source\PSoC5/VERT.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/VERT.c ****     *  source status register.
 676:Generated_Source\PSoC5/VERT.c ****     *
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 20


 677:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 678:Generated_Source\PSoC5/VERT.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/VERT.c ****     *
 680:Generated_Source\PSoC5/VERT.c ****     * Return:
 681:Generated_Source\PSoC5/VERT.c ****     *  None
 682:Generated_Source\PSoC5/VERT.c ****     *
 683:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/VERT.c ****     void VERT_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/VERT.c ****     {
 686:Generated_Source\PSoC5/VERT.c ****         CY_SET_REG8(VERT_STATUS_MASK_PTR, interruptMode);
 687:Generated_Source\PSoC5/VERT.c ****     }
 688:Generated_Source\PSoC5/VERT.c **** 
 689:Generated_Source\PSoC5/VERT.c **** 
 690:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_ReadStatusRegister
 692:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/VERT.c ****     *
 694:Generated_Source\PSoC5/VERT.c ****     * Summary:
 695:Generated_Source\PSoC5/VERT.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/VERT.c ****     *
 697:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 698:Generated_Source\PSoC5/VERT.c ****     *  None
 699:Generated_Source\PSoC5/VERT.c ****     *
 700:Generated_Source\PSoC5/VERT.c ****     * Return:
 701:Generated_Source\PSoC5/VERT.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/VERT.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/VERT.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/VERT.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/VERT.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/VERT.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/VERT.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/VERT.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/VERT.c ****     *
 710:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/VERT.c ****     uint8 VERT_ReadStatusRegister(void) 
 712:Generated_Source\PSoC5/VERT.c ****     {
 713:Generated_Source\PSoC5/VERT.c ****         return (CY_GET_REG8(VERT_STATUS_PTR));
 714:Generated_Source\PSoC5/VERT.c ****     }
 715:Generated_Source\PSoC5/VERT.c **** 
 716:Generated_Source\PSoC5/VERT.c **** #endif /* (VERT_UseStatus || VERT_UsingFixedFunction) */
 717:Generated_Source\PSoC5/VERT.c **** 
 718:Generated_Source\PSoC5/VERT.c **** 
 719:Generated_Source\PSoC5/VERT.c **** #if (VERT_UseControl)
 720:Generated_Source\PSoC5/VERT.c **** 
 721:Generated_Source\PSoC5/VERT.c **** 
 722:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_ReadControlRegister
 724:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/VERT.c ****     *
 726:Generated_Source\PSoC5/VERT.c ****     * Summary:
 727:Generated_Source\PSoC5/VERT.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/VERT.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/VERT.c ****     *
 730:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 731:Generated_Source\PSoC5/VERT.c ****     *  None
 732:Generated_Source\PSoC5/VERT.c ****     *
 733:Generated_Source\PSoC5/VERT.c ****     * Return:
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 21


 734:Generated_Source\PSoC5/VERT.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/VERT.c ****     *
 736:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/VERT.c ****     uint8 VERT_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/VERT.c ****     {
 408              		.loc 1 738 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 8
 411              		@ frame_needed = 1, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 413 0000 80B4     		push	{r7}
 414              		.cfi_def_cfa_offset 4
 415              		.cfi_offset 7, -4
 416 0002 83B0     		sub	sp, sp, #12
 417              		.cfi_def_cfa_offset 16
 418 0004 00AF     		add	r7, sp, #0
 419              		.cfi_def_cfa_register 7
 739:Generated_Source\PSoC5/VERT.c ****         uint8 result;
 740:Generated_Source\PSoC5/VERT.c **** 
 741:Generated_Source\PSoC5/VERT.c ****         result = CY_GET_REG8(VERT_CONTROL_PTR);
 420              		.loc 1 741 0
 421 0006 044B     		ldr	r3, .L29
 422 0008 1B78     		ldrb	r3, [r3]
 423 000a FB71     		strb	r3, [r7, #7]
 742:Generated_Source\PSoC5/VERT.c ****         return (result);
 424              		.loc 1 742 0
 425 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 743:Generated_Source\PSoC5/VERT.c ****     }
 426              		.loc 1 743 0
 427 000e 1846     		mov	r0, r3
 428 0010 0C37     		adds	r7, r7, #12
 429              		.cfi_def_cfa_offset 4
 430 0012 BD46     		mov	sp, r7
 431              		.cfi_def_cfa_register 13
 432              		@ sp needed
 433 0014 80BC     		pop	{r7}
 434              		.cfi_restore 7
 435              		.cfi_def_cfa_offset 0
 436 0016 7047     		bx	lr
 437              	.L30:
 438              		.align	2
 439              	.L29:
 440 0018 74650040 		.word	1073767796
 441              		.cfi_endproc
 442              	.LFE8:
 443              		.size	VERT_ReadControlRegister, .-VERT_ReadControlRegister
 444              		.section	.text.VERT_WriteControlRegister,"ax",%progbits
 445              		.align	2
 446              		.global	VERT_WriteControlRegister
 447              		.thumb
 448              		.thumb_func
 449              		.type	VERT_WriteControlRegister, %function
 450              	VERT_WriteControlRegister:
 451              	.LFB9:
 744:Generated_Source\PSoC5/VERT.c **** 
 745:Generated_Source\PSoC5/VERT.c **** 
 746:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 22


 747:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_WriteControlRegister
 748:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/VERT.c ****     *
 750:Generated_Source\PSoC5/VERT.c ****     * Summary:
 751:Generated_Source\PSoC5/VERT.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/VERT.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/VERT.c ****     *
 754:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 755:Generated_Source\PSoC5/VERT.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:Generated_Source\PSoC5/VERT.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/VERT.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/VERT.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/VERT.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/VERT.c ****     *
 761:Generated_Source\PSoC5/VERT.c ****     * Return:
 762:Generated_Source\PSoC5/VERT.c ****     *  None
 763:Generated_Source\PSoC5/VERT.c ****     *
 764:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/VERT.c ****     void VERT_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/VERT.c ****     {
 452              		.loc 1 766 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457 0000 80B4     		push	{r7}
 458              		.cfi_def_cfa_offset 4
 459              		.cfi_offset 7, -4
 460 0002 83B0     		sub	sp, sp, #12
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
 464 0006 0346     		mov	r3, r0
 465 0008 FB71     		strb	r3, [r7, #7]
 767:Generated_Source\PSoC5/VERT.c ****         CY_SET_REG8(VERT_CONTROL_PTR, control);
 466              		.loc 1 767 0
 467 000a 044A     		ldr	r2, .L32
 468 000c FB79     		ldrb	r3, [r7, #7]
 469 000e 1370     		strb	r3, [r2]
 768:Generated_Source\PSoC5/VERT.c ****     }
 470              		.loc 1 768 0
 471 0010 00BF     		nop
 472 0012 0C37     		adds	r7, r7, #12
 473              		.cfi_def_cfa_offset 4
 474 0014 BD46     		mov	sp, r7
 475              		.cfi_def_cfa_register 13
 476              		@ sp needed
 477 0016 80BC     		pop	{r7}
 478              		.cfi_restore 7
 479              		.cfi_def_cfa_offset 0
 480 0018 7047     		bx	lr
 481              	.L33:
 482 001a 00BF     		.align	2
 483              	.L32:
 484 001c 74650040 		.word	1073767796
 485              		.cfi_endproc
 486              	.LFE9:
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 23


 487              		.size	VERT_WriteControlRegister, .-VERT_WriteControlRegister
 488              		.section	.text.VERT_ReadCapture,"ax",%progbits
 489              		.align	2
 490              		.global	VERT_ReadCapture
 491              		.thumb
 492              		.thumb_func
 493              		.type	VERT_ReadCapture, %function
 494              	VERT_ReadCapture:
 495              	.LFB10:
 769:Generated_Source\PSoC5/VERT.c **** 
 770:Generated_Source\PSoC5/VERT.c **** #endif /* (VERT_UseControl) */
 771:Generated_Source\PSoC5/VERT.c **** 
 772:Generated_Source\PSoC5/VERT.c **** 
 773:Generated_Source\PSoC5/VERT.c **** #if (!VERT_UsingFixedFunction)
 774:Generated_Source\PSoC5/VERT.c **** 
 775:Generated_Source\PSoC5/VERT.c **** 
 776:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_ReadCapture
 778:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/VERT.c ****     *
 780:Generated_Source\PSoC5/VERT.c ****     * Summary:
 781:Generated_Source\PSoC5/VERT.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/VERT.c ****     *
 783:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 784:Generated_Source\PSoC5/VERT.c ****     *  None
 785:Generated_Source\PSoC5/VERT.c ****     *
 786:Generated_Source\PSoC5/VERT.c ****     * Return:
 787:Generated_Source\PSoC5/VERT.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/VERT.c ****     *
 789:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/VERT.c ****     uint16 VERT_ReadCapture(void) 
 791:Generated_Source\PSoC5/VERT.c ****     {
 496              		.loc 1 791 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501 0000 80B4     		push	{r7}
 502              		.cfi_def_cfa_offset 4
 503              		.cfi_offset 7, -4
 504 0002 00AF     		add	r7, sp, #0
 505              		.cfi_def_cfa_register 7
 792:Generated_Source\PSoC5/VERT.c ****         return (CY_GET_REG16(VERT_CAPTURE_LSB_PTR));
 506              		.loc 1 792 0
 507 0004 034B     		ldr	r3, .L36
 508 0006 1B88     		ldrh	r3, [r3]	@ movhi
 509 0008 9BB2     		uxth	r3, r3
 793:Generated_Source\PSoC5/VERT.c ****     }
 510              		.loc 1 793 0
 511 000a 1846     		mov	r0, r3
 512 000c BD46     		mov	sp, r7
 513              		.cfi_def_cfa_register 13
 514              		@ sp needed
 515 000e 80BC     		pop	{r7}
 516              		.cfi_restore 7
 517              		.cfi_def_cfa_offset 0
 518 0010 7047     		bx	lr
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 24


 519              	.L37:
 520 0012 00BF     		.align	2
 521              	.L36:
 522 0014 B46A0040 		.word	1073769140
 523              		.cfi_endproc
 524              	.LFE10:
 525              		.size	VERT_ReadCapture, .-VERT_ReadCapture
 526              		.section	.text.VERT_ReadCompare,"ax",%progbits
 527              		.align	2
 528              		.global	VERT_ReadCompare
 529              		.thumb
 530              		.thumb_func
 531              		.type	VERT_ReadCompare, %function
 532              	VERT_ReadCompare:
 533              	.LFB11:
 794:Generated_Source\PSoC5/VERT.c **** 
 795:Generated_Source\PSoC5/VERT.c **** #endif /* (!VERT_UsingFixedFunction) */
 796:Generated_Source\PSoC5/VERT.c **** 
 797:Generated_Source\PSoC5/VERT.c **** 
 798:Generated_Source\PSoC5/VERT.c **** #if (VERT_UseOneCompareMode)
 799:Generated_Source\PSoC5/VERT.c **** 
 800:Generated_Source\PSoC5/VERT.c **** 
 801:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_ReadCompare
 803:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/VERT.c ****     *
 805:Generated_Source\PSoC5/VERT.c ****     * Summary:
 806:Generated_Source\PSoC5/VERT.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/VERT.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/VERT.c ****     *
 809:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 810:Generated_Source\PSoC5/VERT.c ****     *  None
 811:Generated_Source\PSoC5/VERT.c ****     *
 812:Generated_Source\PSoC5/VERT.c ****     * Return:
 813:Generated_Source\PSoC5/VERT.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/VERT.c ****     *
 815:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/VERT.c ****     uint16 VERT_ReadCompare(void) 
 817:Generated_Source\PSoC5/VERT.c ****     {
 534              		.loc 1 817 0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 1, uses_anonymous_args = 0
 538              		@ link register save eliminated.
 539 0000 80B4     		push	{r7}
 540              		.cfi_def_cfa_offset 4
 541              		.cfi_offset 7, -4
 542 0002 00AF     		add	r7, sp, #0
 543              		.cfi_def_cfa_register 7
 818:Generated_Source\PSoC5/VERT.c ****         #if(VERT_UsingFixedFunction)
 819:Generated_Source\PSoC5/VERT.c ****             return ((uint16)CY_GET_REG16(VERT_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/VERT.c ****         #else
 821:Generated_Source\PSoC5/VERT.c ****             return (CY_GET_REG16(VERT_COMPARE1_LSB_PTR));
 544              		.loc 1 821 0
 545 0004 034B     		ldr	r3, .L40
 546 0006 1B88     		ldrh	r3, [r3]	@ movhi
 547 0008 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 25


 822:Generated_Source\PSoC5/VERT.c ****         #endif /* (VERT_UsingFixedFunction) */
 823:Generated_Source\PSoC5/VERT.c ****     }
 548              		.loc 1 823 0
 549 000a 1846     		mov	r0, r3
 550 000c BD46     		mov	sp, r7
 551              		.cfi_def_cfa_register 13
 552              		@ sp needed
 553 000e 80BC     		pop	{r7}
 554              		.cfi_restore 7
 555              		.cfi_def_cfa_offset 0
 556 0010 7047     		bx	lr
 557              	.L41:
 558 0012 00BF     		.align	2
 559              	.L40:
 560 0014 546A0040 		.word	1073769044
 561              		.cfi_endproc
 562              	.LFE11:
 563              		.size	VERT_ReadCompare, .-VERT_ReadCompare
 564              		.section	.text.VERT_ReadPeriod,"ax",%progbits
 565              		.align	2
 566              		.global	VERT_ReadPeriod
 567              		.thumb
 568              		.thumb_func
 569              		.type	VERT_ReadPeriod, %function
 570              	VERT_ReadPeriod:
 571              	.LFB12:
 824:Generated_Source\PSoC5/VERT.c **** 
 825:Generated_Source\PSoC5/VERT.c **** #else
 826:Generated_Source\PSoC5/VERT.c **** 
 827:Generated_Source\PSoC5/VERT.c **** 
 828:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_ReadCompare1
 830:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/VERT.c ****     *
 832:Generated_Source\PSoC5/VERT.c ****     * Summary:
 833:Generated_Source\PSoC5/VERT.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/VERT.c ****     *
 835:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 836:Generated_Source\PSoC5/VERT.c ****     *  None
 837:Generated_Source\PSoC5/VERT.c ****     *
 838:Generated_Source\PSoC5/VERT.c ****     * Return:
 839:Generated_Source\PSoC5/VERT.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/VERT.c ****     *
 841:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/VERT.c ****     uint16 VERT_ReadCompare1(void) 
 843:Generated_Source\PSoC5/VERT.c ****     {
 844:Generated_Source\PSoC5/VERT.c ****         return (CY_GET_REG16(VERT_COMPARE1_LSB_PTR));
 845:Generated_Source\PSoC5/VERT.c ****     }
 846:Generated_Source\PSoC5/VERT.c **** 
 847:Generated_Source\PSoC5/VERT.c **** 
 848:Generated_Source\PSoC5/VERT.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/VERT.c ****     * Function Name: VERT_ReadCompare2
 850:Generated_Source\PSoC5/VERT.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/VERT.c ****     *
 852:Generated_Source\PSoC5/VERT.c ****     * Summary:
 853:Generated_Source\PSoC5/VERT.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/VERT.c ****     *
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 26


 855:Generated_Source\PSoC5/VERT.c ****     * Parameters:
 856:Generated_Source\PSoC5/VERT.c ****     *  None
 857:Generated_Source\PSoC5/VERT.c ****     *
 858:Generated_Source\PSoC5/VERT.c ****     * Return:
 859:Generated_Source\PSoC5/VERT.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/VERT.c ****     *
 861:Generated_Source\PSoC5/VERT.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/VERT.c ****     uint16 VERT_ReadCompare2(void) 
 863:Generated_Source\PSoC5/VERT.c ****     {
 864:Generated_Source\PSoC5/VERT.c ****         return (CY_GET_REG16(VERT_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/VERT.c ****     }
 866:Generated_Source\PSoC5/VERT.c **** 
 867:Generated_Source\PSoC5/VERT.c **** #endif /* (VERT_UseOneCompareMode) */
 868:Generated_Source\PSoC5/VERT.c **** 
 869:Generated_Source\PSoC5/VERT.c **** 
 870:Generated_Source\PSoC5/VERT.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/VERT.c **** * Function Name: VERT_ReadPeriod
 872:Generated_Source\PSoC5/VERT.c **** ********************************************************************************
 873:Generated_Source\PSoC5/VERT.c **** *
 874:Generated_Source\PSoC5/VERT.c **** * Summary:
 875:Generated_Source\PSoC5/VERT.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/VERT.c **** *
 877:Generated_Source\PSoC5/VERT.c **** * Parameters:
 878:Generated_Source\PSoC5/VERT.c **** *  None
 879:Generated_Source\PSoC5/VERT.c **** *
 880:Generated_Source\PSoC5/VERT.c **** * Return:
 881:Generated_Source\PSoC5/VERT.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/VERT.c **** *
 883:Generated_Source\PSoC5/VERT.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/VERT.c **** uint16 VERT_ReadPeriod(void) 
 885:Generated_Source\PSoC5/VERT.c **** {
 572              		.loc 1 885 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577 0000 80B4     		push	{r7}
 578              		.cfi_def_cfa_offset 4
 579              		.cfi_offset 7, -4
 580 0002 00AF     		add	r7, sp, #0
 581              		.cfi_def_cfa_register 7
 886:Generated_Source\PSoC5/VERT.c ****     #if(VERT_UsingFixedFunction)
 887:Generated_Source\PSoC5/VERT.c ****         return ((uint16)CY_GET_REG16(VERT_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/VERT.c ****     #else
 889:Generated_Source\PSoC5/VERT.c ****         return (CY_GET_REG16(VERT_PERIOD_LSB_PTR));
 582              		.loc 1 889 0
 583 0004 034B     		ldr	r3, .L44
 584 0006 1B88     		ldrh	r3, [r3]	@ movhi
 585 0008 9BB2     		uxth	r3, r3
 890:Generated_Source\PSoC5/VERT.c ****     #endif /* (VERT_UsingFixedFunction) */
 891:Generated_Source\PSoC5/VERT.c **** }
 586              		.loc 1 891 0
 587 000a 1846     		mov	r0, r3
 588 000c BD46     		mov	sp, r7
 589              		.cfi_def_cfa_register 13
 590              		@ sp needed
 591 000e 80BC     		pop	{r7}
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 27


 592              		.cfi_restore 7
 593              		.cfi_def_cfa_offset 0
 594 0010 7047     		bx	lr
 595              	.L45:
 596 0012 00BF     		.align	2
 597              	.L44:
 598 0014 946A0040 		.word	1073769108
 599              		.cfi_endproc
 600              	.LFE12:
 601              		.size	VERT_ReadPeriod, .-VERT_ReadPeriod
 602              		.text
 603              	.Letext0:
 604              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 605              		.section	.debug_info,"",%progbits
 606              	.Ldebug_info0:
 607 0000 47020000 		.4byte	0x247
 608 0004 0400     		.2byte	0x4
 609 0006 00000000 		.4byte	.Ldebug_abbrev0
 610 000a 04       		.byte	0x4
 611 000b 01       		.uleb128 0x1
 612 000c 10000000 		.4byte	.LASF36
 613 0010 0C       		.byte	0xc
 614 0011 F8010000 		.4byte	.LASF37
 615 0015 33010000 		.4byte	.LASF38
 616 0019 00000000 		.4byte	.Ldebug_ranges0+0
 617 001d 00000000 		.4byte	0
 618 0021 00000000 		.4byte	.Ldebug_line0
 619 0025 02       		.uleb128 0x2
 620 0026 01       		.byte	0x1
 621 0027 06       		.byte	0x6
 622 0028 AF020000 		.4byte	.LASF0
 623 002c 02       		.uleb128 0x2
 624 002d 01       		.byte	0x1
 625 002e 08       		.byte	0x8
 626 002f E9000000 		.4byte	.LASF1
 627 0033 02       		.uleb128 0x2
 628 0034 02       		.byte	0x2
 629 0035 05       		.byte	0x5
 630 0036 4A020000 		.4byte	.LASF2
 631 003a 02       		.uleb128 0x2
 632 003b 02       		.byte	0x2
 633 003c 07       		.byte	0x7
 634 003d B7000000 		.4byte	.LASF3
 635 0041 02       		.uleb128 0x2
 636 0042 04       		.byte	0x4
 637 0043 05       		.byte	0x5
 638 0044 95020000 		.4byte	.LASF4
 639 0048 02       		.uleb128 0x2
 640 0049 04       		.byte	0x4
 641 004a 07       		.byte	0x7
 642 004b 06010000 		.4byte	.LASF5
 643 004f 02       		.uleb128 0x2
 644 0050 08       		.byte	0x8
 645 0051 05       		.byte	0x5
 646 0052 1F020000 		.4byte	.LASF6
 647 0056 02       		.uleb128 0x2
 648 0057 08       		.byte	0x8
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 28


 649 0058 07       		.byte	0x7
 650 0059 C9010000 		.4byte	.LASF7
 651 005d 03       		.uleb128 0x3
 652 005e 04       		.byte	0x4
 653 005f 05       		.byte	0x5
 654 0060 696E7400 		.ascii	"int\000"
 655 0064 02       		.uleb128 0x2
 656 0065 04       		.byte	0x4
 657 0066 07       		.byte	0x7
 658 0067 BC010000 		.4byte	.LASF8
 659 006b 04       		.uleb128 0x4
 660 006c 18010000 		.4byte	.LASF9
 661 0070 02       		.byte	0x2
 662 0071 E401     		.2byte	0x1e4
 663 0073 2C000000 		.4byte	0x2c
 664 0077 04       		.uleb128 0x4
 665 0078 A9010000 		.4byte	.LASF10
 666 007c 02       		.byte	0x2
 667 007d E501     		.2byte	0x1e5
 668 007f 3A000000 		.4byte	0x3a
 669 0083 02       		.uleb128 0x2
 670 0084 04       		.byte	0x4
 671 0085 04       		.byte	0x4
 672 0086 DB000000 		.4byte	.LASF11
 673 008a 02       		.uleb128 0x2
 674 008b 08       		.byte	0x8
 675 008c 04       		.byte	0x4
 676 008d 79010000 		.4byte	.LASF12
 677 0091 02       		.uleb128 0x2
 678 0092 01       		.byte	0x1
 679 0093 08       		.byte	0x8
 680 0094 9E020000 		.4byte	.LASF13
 681 0098 04       		.uleb128 0x4
 682 0099 F7000000 		.4byte	.LASF14
 683 009d 02       		.byte	0x2
 684 009e 8E02     		.2byte	0x28e
 685 00a0 A4000000 		.4byte	0xa4
 686 00a4 05       		.uleb128 0x5
 687 00a5 6B000000 		.4byte	0x6b
 688 00a9 04       		.uleb128 0x4
 689 00aa 00000000 		.4byte	.LASF15
 690 00ae 02       		.byte	0x2
 691 00af 8F02     		.2byte	0x28f
 692 00b1 B5000000 		.4byte	0xb5
 693 00b5 05       		.uleb128 0x5
 694 00b6 77000000 		.4byte	0x77
 695 00ba 02       		.uleb128 0x2
 696 00bb 08       		.byte	0x8
 697 00bc 04       		.byte	0x4
 698 00bd A3020000 		.4byte	.LASF16
 699 00c1 02       		.uleb128 0x2
 700 00c2 04       		.byte	0x4
 701 00c3 07       		.byte	0x7
 702 00c4 16020000 		.4byte	.LASF17
 703 00c8 06       		.uleb128 0x6
 704 00c9 3F020000 		.4byte	.LASF18
 705 00cd 01       		.byte	0x1
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 29


 706 00ce 37       		.byte	0x37
 707 00cf 00000000 		.4byte	.LFB0
 708 00d3 24000000 		.4byte	.LFE0-.LFB0
 709 00d7 01       		.uleb128 0x1
 710 00d8 9C       		.byte	0x9c
 711 00d9 07       		.uleb128 0x7
 712 00da 06000000 		.4byte	.LASF21
 713 00de 01       		.byte	0x1
 714 00df 54       		.byte	0x54
 715 00e0 00000000 		.4byte	.LFB1
 716 00e4 68000000 		.4byte	.LFE1-.LFB1
 717 00e8 01       		.uleb128 0x1
 718 00e9 9C       		.byte	0x9c
 719 00ea FD000000 		.4byte	0xfd
 720 00ee 08       		.uleb128 0x8
 721 00ef 7F020000 		.4byte	.LASF28
 722 00f3 01       		.byte	0x1
 723 00f4 57       		.byte	0x57
 724 00f5 6B000000 		.4byte	0x6b
 725 00f9 02       		.uleb128 0x2
 726 00fa 91       		.byte	0x91
 727 00fb 77       		.sleb128 -9
 728 00fc 00       		.byte	0
 729 00fd 09       		.uleb128 0x9
 730 00fe B0010000 		.4byte	.LASF19
 731 0102 01       		.byte	0x1
 732 0103 C7       		.byte	0xc7
 733 0104 00000000 		.4byte	.LFB2
 734 0108 20000000 		.4byte	.LFE2-.LFB2
 735 010c 01       		.uleb128 0x1
 736 010d 9C       		.byte	0x9c
 737 010e 09       		.uleb128 0x9
 738 010f FC000000 		.4byte	.LASF20
 739 0113 01       		.byte	0x1
 740 0114 E9       		.byte	0xe9
 741 0115 00000000 		.4byte	.LFB3
 742 0119 20000000 		.4byte	.LFE3-.LFB3
 743 011d 01       		.uleb128 0x1
 744 011e 9C       		.byte	0x9c
 745 011f 0A       		.uleb128 0xa
 746 0120 9E000000 		.4byte	.LASF22
 747 0124 01       		.byte	0x1
 748 0125 9301     		.2byte	0x193
 749 0127 00000000 		.4byte	.LFB4
 750 012b 20000000 		.4byte	.LFE4-.LFB4
 751 012f 01       		.uleb128 0x1
 752 0130 9C       		.byte	0x9c
 753 0131 45010000 		.4byte	0x145
 754 0135 0B       		.uleb128 0xb
 755 0136 E1000000 		.4byte	.LASF24
 756 013a 01       		.byte	0x1
 757 013b 9301     		.2byte	0x193
 758 013d 77000000 		.4byte	0x77
 759 0141 02       		.uleb128 0x2
 760 0142 91       		.byte	0x91
 761 0143 76       		.sleb128 -10
 762 0144 00       		.byte	0
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 30


 763 0145 0C       		.uleb128 0xc
 764 0146 CA000000 		.4byte	.LASF32
 765 014a 01       		.byte	0x1
 766 014b A901     		.2byte	0x1a9
 767 014d 77000000 		.4byte	0x77
 768 0151 00000000 		.4byte	.LFB5
 769 0155 20000000 		.4byte	.LFE5-.LFB5
 770 0159 01       		.uleb128 0x1
 771 015a 9C       		.byte	0x9c
 772 015b 0A       		.uleb128 0xa
 773 015c E7010000 		.4byte	.LASF23
 774 0160 01       		.byte	0x1
 775 0161 E201     		.2byte	0x1e2
 776 0163 00000000 		.4byte	.LFB6
 777 0167 20000000 		.4byte	.LFE6-.LFB6
 778 016b 01       		.uleb128 0x1
 779 016c 9C       		.byte	0x9c
 780 016d 81010000 		.4byte	0x181
 781 0171 0B       		.uleb128 0xb
 782 0172 B0000000 		.4byte	.LASF25
 783 0176 01       		.byte	0x1
 784 0177 E201     		.2byte	0x1e2
 785 0179 77000000 		.4byte	0x77
 786 017d 02       		.uleb128 0x2
 787 017e 91       		.byte	0x91
 788 017f 76       		.sleb128 -10
 789 0180 00       		.byte	0
 790 0181 0A       		.uleb128 0xa
 791 0182 2D020000 		.4byte	.LASF26
 792 0186 01       		.byte	0x1
 793 0187 0402     		.2byte	0x204
 794 0189 00000000 		.4byte	.LFB7
 795 018d 20000000 		.4byte	.LFE7-.LFB7
 796 0191 01       		.uleb128 0x1
 797 0192 9C       		.byte	0x9c
 798 0193 A7010000 		.4byte	0x1a7
 799 0197 0B       		.uleb128 0xb
 800 0198 BB020000 		.4byte	.LASF27
 801 019c 01       		.byte	0x1
 802 019d 0402     		.2byte	0x204
 803 019f 77000000 		.4byte	0x77
 804 01a3 02       		.uleb128 0x2
 805 01a4 91       		.byte	0x91
 806 01a5 76       		.sleb128 -10
 807 01a6 00       		.byte	0
 808 01a7 0D       		.uleb128 0xd
 809 01a8 80010000 		.4byte	.LASF39
 810 01ac 01       		.byte	0x1
 811 01ad E102     		.2byte	0x2e1
 812 01af 6B000000 		.4byte	0x6b
 813 01b3 00000000 		.4byte	.LFB8
 814 01b7 1C000000 		.4byte	.LFE8-.LFB8
 815 01bb 01       		.uleb128 0x1
 816 01bc 9C       		.byte	0x9c
 817 01bd D1010000 		.4byte	0x1d1
 818 01c1 0E       		.uleb128 0xe
 819 01c2 E0010000 		.4byte	.LASF29
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 31


 820 01c6 01       		.byte	0x1
 821 01c7 E302     		.2byte	0x2e3
 822 01c9 6B000000 		.4byte	0x6b
 823 01cd 02       		.uleb128 0x2
 824 01ce 91       		.byte	0x91
 825 01cf 77       		.sleb128 -9
 826 01d0 00       		.byte	0
 827 01d1 0A       		.uleb128 0xa
 828 01d2 65020000 		.4byte	.LASF30
 829 01d6 01       		.byte	0x1
 830 01d7 FD02     		.2byte	0x2fd
 831 01d9 00000000 		.4byte	.LFB9
 832 01dd 20000000 		.4byte	.LFE9-.LFB9
 833 01e1 01       		.uleb128 0x1
 834 01e2 9C       		.byte	0x9c
 835 01e3 F7010000 		.4byte	0x1f7
 836 01e7 0B       		.uleb128 0xb
 837 01e8 1E010000 		.4byte	.LASF31
 838 01ec 01       		.byte	0x1
 839 01ed FD02     		.2byte	0x2fd
 840 01ef 6B000000 		.4byte	0x6b
 841 01f3 02       		.uleb128 0x2
 842 01f4 91       		.byte	0x91
 843 01f5 77       		.sleb128 -9
 844 01f6 00       		.byte	0
 845 01f7 0C       		.uleb128 0xc
 846 01f8 84020000 		.4byte	.LASF33
 847 01fc 01       		.byte	0x1
 848 01fd 1603     		.2byte	0x316
 849 01ff 77000000 		.4byte	0x77
 850 0203 00000000 		.4byte	.LFB10
 851 0207 18000000 		.4byte	.LFE10-.LFB10
 852 020b 01       		.uleb128 0x1
 853 020c 9C       		.byte	0x9c
 854 020d 0C       		.uleb128 0xc
 855 020e 54020000 		.4byte	.LASF34
 856 0212 01       		.byte	0x1
 857 0213 3003     		.2byte	0x330
 858 0215 77000000 		.4byte	0x77
 859 0219 00000000 		.4byte	.LFB11
 860 021d 18000000 		.4byte	.LFE11-.LFB11
 861 0221 01       		.uleb128 0x1
 862 0222 9C       		.byte	0x9c
 863 0223 0C       		.uleb128 0xc
 864 0224 99010000 		.4byte	.LASF35
 865 0228 01       		.byte	0x1
 866 0229 7403     		.2byte	0x374
 867 022b 77000000 		.4byte	0x77
 868 022f 00000000 		.4byte	.LFB12
 869 0233 18000000 		.4byte	.LFE12-.LFB12
 870 0237 01       		.uleb128 0x1
 871 0238 9C       		.byte	0x9c
 872 0239 0F       		.uleb128 0xf
 873 023a 26010000 		.4byte	.LASF40
 874 023e 01       		.byte	0x1
 875 023f 20       		.byte	0x20
 876 0240 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 32


 877 0244 05       		.uleb128 0x5
 878 0245 03       		.byte	0x3
 879 0246 00000000 		.4byte	VERT_initVar
 880 024a 00       		.byte	0
 881              		.section	.debug_abbrev,"",%progbits
 882              	.Ldebug_abbrev0:
 883 0000 01       		.uleb128 0x1
 884 0001 11       		.uleb128 0x11
 885 0002 01       		.byte	0x1
 886 0003 25       		.uleb128 0x25
 887 0004 0E       		.uleb128 0xe
 888 0005 13       		.uleb128 0x13
 889 0006 0B       		.uleb128 0xb
 890 0007 03       		.uleb128 0x3
 891 0008 0E       		.uleb128 0xe
 892 0009 1B       		.uleb128 0x1b
 893 000a 0E       		.uleb128 0xe
 894 000b 55       		.uleb128 0x55
 895 000c 17       		.uleb128 0x17
 896 000d 11       		.uleb128 0x11
 897 000e 01       		.uleb128 0x1
 898 000f 10       		.uleb128 0x10
 899 0010 17       		.uleb128 0x17
 900 0011 00       		.byte	0
 901 0012 00       		.byte	0
 902 0013 02       		.uleb128 0x2
 903 0014 24       		.uleb128 0x24
 904 0015 00       		.byte	0
 905 0016 0B       		.uleb128 0xb
 906 0017 0B       		.uleb128 0xb
 907 0018 3E       		.uleb128 0x3e
 908 0019 0B       		.uleb128 0xb
 909 001a 03       		.uleb128 0x3
 910 001b 0E       		.uleb128 0xe
 911 001c 00       		.byte	0
 912 001d 00       		.byte	0
 913 001e 03       		.uleb128 0x3
 914 001f 24       		.uleb128 0x24
 915 0020 00       		.byte	0
 916 0021 0B       		.uleb128 0xb
 917 0022 0B       		.uleb128 0xb
 918 0023 3E       		.uleb128 0x3e
 919 0024 0B       		.uleb128 0xb
 920 0025 03       		.uleb128 0x3
 921 0026 08       		.uleb128 0x8
 922 0027 00       		.byte	0
 923 0028 00       		.byte	0
 924 0029 04       		.uleb128 0x4
 925 002a 16       		.uleb128 0x16
 926 002b 00       		.byte	0
 927 002c 03       		.uleb128 0x3
 928 002d 0E       		.uleb128 0xe
 929 002e 3A       		.uleb128 0x3a
 930 002f 0B       		.uleb128 0xb
 931 0030 3B       		.uleb128 0x3b
 932 0031 05       		.uleb128 0x5
 933 0032 49       		.uleb128 0x49
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 33


 934 0033 13       		.uleb128 0x13
 935 0034 00       		.byte	0
 936 0035 00       		.byte	0
 937 0036 05       		.uleb128 0x5
 938 0037 35       		.uleb128 0x35
 939 0038 00       		.byte	0
 940 0039 49       		.uleb128 0x49
 941 003a 13       		.uleb128 0x13
 942 003b 00       		.byte	0
 943 003c 00       		.byte	0
 944 003d 06       		.uleb128 0x6
 945 003e 2E       		.uleb128 0x2e
 946 003f 00       		.byte	0
 947 0040 3F       		.uleb128 0x3f
 948 0041 19       		.uleb128 0x19
 949 0042 03       		.uleb128 0x3
 950 0043 0E       		.uleb128 0xe
 951 0044 3A       		.uleb128 0x3a
 952 0045 0B       		.uleb128 0xb
 953 0046 3B       		.uleb128 0x3b
 954 0047 0B       		.uleb128 0xb
 955 0048 27       		.uleb128 0x27
 956 0049 19       		.uleb128 0x19
 957 004a 11       		.uleb128 0x11
 958 004b 01       		.uleb128 0x1
 959 004c 12       		.uleb128 0x12
 960 004d 06       		.uleb128 0x6
 961 004e 40       		.uleb128 0x40
 962 004f 18       		.uleb128 0x18
 963 0050 9642     		.uleb128 0x2116
 964 0052 19       		.uleb128 0x19
 965 0053 00       		.byte	0
 966 0054 00       		.byte	0
 967 0055 07       		.uleb128 0x7
 968 0056 2E       		.uleb128 0x2e
 969 0057 01       		.byte	0x1
 970 0058 3F       		.uleb128 0x3f
 971 0059 19       		.uleb128 0x19
 972 005a 03       		.uleb128 0x3
 973 005b 0E       		.uleb128 0xe
 974 005c 3A       		.uleb128 0x3a
 975 005d 0B       		.uleb128 0xb
 976 005e 3B       		.uleb128 0x3b
 977 005f 0B       		.uleb128 0xb
 978 0060 27       		.uleb128 0x27
 979 0061 19       		.uleb128 0x19
 980 0062 11       		.uleb128 0x11
 981 0063 01       		.uleb128 0x1
 982 0064 12       		.uleb128 0x12
 983 0065 06       		.uleb128 0x6
 984 0066 40       		.uleb128 0x40
 985 0067 18       		.uleb128 0x18
 986 0068 9642     		.uleb128 0x2116
 987 006a 19       		.uleb128 0x19
 988 006b 01       		.uleb128 0x1
 989 006c 13       		.uleb128 0x13
 990 006d 00       		.byte	0
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 34


 991 006e 00       		.byte	0
 992 006f 08       		.uleb128 0x8
 993 0070 34       		.uleb128 0x34
 994 0071 00       		.byte	0
 995 0072 03       		.uleb128 0x3
 996 0073 0E       		.uleb128 0xe
 997 0074 3A       		.uleb128 0x3a
 998 0075 0B       		.uleb128 0xb
 999 0076 3B       		.uleb128 0x3b
 1000 0077 0B       		.uleb128 0xb
 1001 0078 49       		.uleb128 0x49
 1002 0079 13       		.uleb128 0x13
 1003 007a 02       		.uleb128 0x2
 1004 007b 18       		.uleb128 0x18
 1005 007c 00       		.byte	0
 1006 007d 00       		.byte	0
 1007 007e 09       		.uleb128 0x9
 1008 007f 2E       		.uleb128 0x2e
 1009 0080 00       		.byte	0
 1010 0081 3F       		.uleb128 0x3f
 1011 0082 19       		.uleb128 0x19
 1012 0083 03       		.uleb128 0x3
 1013 0084 0E       		.uleb128 0xe
 1014 0085 3A       		.uleb128 0x3a
 1015 0086 0B       		.uleb128 0xb
 1016 0087 3B       		.uleb128 0x3b
 1017 0088 0B       		.uleb128 0xb
 1018 0089 27       		.uleb128 0x27
 1019 008a 19       		.uleb128 0x19
 1020 008b 11       		.uleb128 0x11
 1021 008c 01       		.uleb128 0x1
 1022 008d 12       		.uleb128 0x12
 1023 008e 06       		.uleb128 0x6
 1024 008f 40       		.uleb128 0x40
 1025 0090 18       		.uleb128 0x18
 1026 0091 9742     		.uleb128 0x2117
 1027 0093 19       		.uleb128 0x19
 1028 0094 00       		.byte	0
 1029 0095 00       		.byte	0
 1030 0096 0A       		.uleb128 0xa
 1031 0097 2E       		.uleb128 0x2e
 1032 0098 01       		.byte	0x1
 1033 0099 3F       		.uleb128 0x3f
 1034 009a 19       		.uleb128 0x19
 1035 009b 03       		.uleb128 0x3
 1036 009c 0E       		.uleb128 0xe
 1037 009d 3A       		.uleb128 0x3a
 1038 009e 0B       		.uleb128 0xb
 1039 009f 3B       		.uleb128 0x3b
 1040 00a0 05       		.uleb128 0x5
 1041 00a1 27       		.uleb128 0x27
 1042 00a2 19       		.uleb128 0x19
 1043 00a3 11       		.uleb128 0x11
 1044 00a4 01       		.uleb128 0x1
 1045 00a5 12       		.uleb128 0x12
 1046 00a6 06       		.uleb128 0x6
 1047 00a7 40       		.uleb128 0x40
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 35


 1048 00a8 18       		.uleb128 0x18
 1049 00a9 9742     		.uleb128 0x2117
 1050 00ab 19       		.uleb128 0x19
 1051 00ac 01       		.uleb128 0x1
 1052 00ad 13       		.uleb128 0x13
 1053 00ae 00       		.byte	0
 1054 00af 00       		.byte	0
 1055 00b0 0B       		.uleb128 0xb
 1056 00b1 05       		.uleb128 0x5
 1057 00b2 00       		.byte	0
 1058 00b3 03       		.uleb128 0x3
 1059 00b4 0E       		.uleb128 0xe
 1060 00b5 3A       		.uleb128 0x3a
 1061 00b6 0B       		.uleb128 0xb
 1062 00b7 3B       		.uleb128 0x3b
 1063 00b8 05       		.uleb128 0x5
 1064 00b9 49       		.uleb128 0x49
 1065 00ba 13       		.uleb128 0x13
 1066 00bb 02       		.uleb128 0x2
 1067 00bc 18       		.uleb128 0x18
 1068 00bd 00       		.byte	0
 1069 00be 00       		.byte	0
 1070 00bf 0C       		.uleb128 0xc
 1071 00c0 2E       		.uleb128 0x2e
 1072 00c1 00       		.byte	0
 1073 00c2 3F       		.uleb128 0x3f
 1074 00c3 19       		.uleb128 0x19
 1075 00c4 03       		.uleb128 0x3
 1076 00c5 0E       		.uleb128 0xe
 1077 00c6 3A       		.uleb128 0x3a
 1078 00c7 0B       		.uleb128 0xb
 1079 00c8 3B       		.uleb128 0x3b
 1080 00c9 05       		.uleb128 0x5
 1081 00ca 27       		.uleb128 0x27
 1082 00cb 19       		.uleb128 0x19
 1083 00cc 49       		.uleb128 0x49
 1084 00cd 13       		.uleb128 0x13
 1085 00ce 11       		.uleb128 0x11
 1086 00cf 01       		.uleb128 0x1
 1087 00d0 12       		.uleb128 0x12
 1088 00d1 06       		.uleb128 0x6
 1089 00d2 40       		.uleb128 0x40
 1090 00d3 18       		.uleb128 0x18
 1091 00d4 9742     		.uleb128 0x2117
 1092 00d6 19       		.uleb128 0x19
 1093 00d7 00       		.byte	0
 1094 00d8 00       		.byte	0
 1095 00d9 0D       		.uleb128 0xd
 1096 00da 2E       		.uleb128 0x2e
 1097 00db 01       		.byte	0x1
 1098 00dc 3F       		.uleb128 0x3f
 1099 00dd 19       		.uleb128 0x19
 1100 00de 03       		.uleb128 0x3
 1101 00df 0E       		.uleb128 0xe
 1102 00e0 3A       		.uleb128 0x3a
 1103 00e1 0B       		.uleb128 0xb
 1104 00e2 3B       		.uleb128 0x3b
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 36


 1105 00e3 05       		.uleb128 0x5
 1106 00e4 27       		.uleb128 0x27
 1107 00e5 19       		.uleb128 0x19
 1108 00e6 49       		.uleb128 0x49
 1109 00e7 13       		.uleb128 0x13
 1110 00e8 11       		.uleb128 0x11
 1111 00e9 01       		.uleb128 0x1
 1112 00ea 12       		.uleb128 0x12
 1113 00eb 06       		.uleb128 0x6
 1114 00ec 40       		.uleb128 0x40
 1115 00ed 18       		.uleb128 0x18
 1116 00ee 9742     		.uleb128 0x2117
 1117 00f0 19       		.uleb128 0x19
 1118 00f1 01       		.uleb128 0x1
 1119 00f2 13       		.uleb128 0x13
 1120 00f3 00       		.byte	0
 1121 00f4 00       		.byte	0
 1122 00f5 0E       		.uleb128 0xe
 1123 00f6 34       		.uleb128 0x34
 1124 00f7 00       		.byte	0
 1125 00f8 03       		.uleb128 0x3
 1126 00f9 0E       		.uleb128 0xe
 1127 00fa 3A       		.uleb128 0x3a
 1128 00fb 0B       		.uleb128 0xb
 1129 00fc 3B       		.uleb128 0x3b
 1130 00fd 05       		.uleb128 0x5
 1131 00fe 49       		.uleb128 0x49
 1132 00ff 13       		.uleb128 0x13
 1133 0100 02       		.uleb128 0x2
 1134 0101 18       		.uleb128 0x18
 1135 0102 00       		.byte	0
 1136 0103 00       		.byte	0
 1137 0104 0F       		.uleb128 0xf
 1138 0105 34       		.uleb128 0x34
 1139 0106 00       		.byte	0
 1140 0107 03       		.uleb128 0x3
 1141 0108 0E       		.uleb128 0xe
 1142 0109 3A       		.uleb128 0x3a
 1143 010a 0B       		.uleb128 0xb
 1144 010b 3B       		.uleb128 0x3b
 1145 010c 0B       		.uleb128 0xb
 1146 010d 49       		.uleb128 0x49
 1147 010e 13       		.uleb128 0x13
 1148 010f 3F       		.uleb128 0x3f
 1149 0110 19       		.uleb128 0x19
 1150 0111 02       		.uleb128 0x2
 1151 0112 18       		.uleb128 0x18
 1152 0113 00       		.byte	0
 1153 0114 00       		.byte	0
 1154 0115 00       		.byte	0
 1155              		.section	.debug_aranges,"",%progbits
 1156 0000 7C000000 		.4byte	0x7c
 1157 0004 0200     		.2byte	0x2
 1158 0006 00000000 		.4byte	.Ldebug_info0
 1159 000a 04       		.byte	0x4
 1160 000b 00       		.byte	0
 1161 000c 0000     		.2byte	0
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 37


 1162 000e 0000     		.2byte	0
 1163 0010 00000000 		.4byte	.LFB0
 1164 0014 24000000 		.4byte	.LFE0-.LFB0
 1165 0018 00000000 		.4byte	.LFB1
 1166 001c 68000000 		.4byte	.LFE1-.LFB1
 1167 0020 00000000 		.4byte	.LFB2
 1168 0024 20000000 		.4byte	.LFE2-.LFB2
 1169 0028 00000000 		.4byte	.LFB3
 1170 002c 20000000 		.4byte	.LFE3-.LFB3
 1171 0030 00000000 		.4byte	.LFB4
 1172 0034 20000000 		.4byte	.LFE4-.LFB4
 1173 0038 00000000 		.4byte	.LFB5
 1174 003c 20000000 		.4byte	.LFE5-.LFB5
 1175 0040 00000000 		.4byte	.LFB6
 1176 0044 20000000 		.4byte	.LFE6-.LFB6
 1177 0048 00000000 		.4byte	.LFB7
 1178 004c 20000000 		.4byte	.LFE7-.LFB7
 1179 0050 00000000 		.4byte	.LFB8
 1180 0054 1C000000 		.4byte	.LFE8-.LFB8
 1181 0058 00000000 		.4byte	.LFB9
 1182 005c 20000000 		.4byte	.LFE9-.LFB9
 1183 0060 00000000 		.4byte	.LFB10
 1184 0064 18000000 		.4byte	.LFE10-.LFB10
 1185 0068 00000000 		.4byte	.LFB11
 1186 006c 18000000 		.4byte	.LFE11-.LFB11
 1187 0070 00000000 		.4byte	.LFB12
 1188 0074 18000000 		.4byte	.LFE12-.LFB12
 1189 0078 00000000 		.4byte	0
 1190 007c 00000000 		.4byte	0
 1191              		.section	.debug_ranges,"",%progbits
 1192              	.Ldebug_ranges0:
 1193 0000 00000000 		.4byte	.LFB0
 1194 0004 24000000 		.4byte	.LFE0
 1195 0008 00000000 		.4byte	.LFB1
 1196 000c 68000000 		.4byte	.LFE1
 1197 0010 00000000 		.4byte	.LFB2
 1198 0014 20000000 		.4byte	.LFE2
 1199 0018 00000000 		.4byte	.LFB3
 1200 001c 20000000 		.4byte	.LFE3
 1201 0020 00000000 		.4byte	.LFB4
 1202 0024 20000000 		.4byte	.LFE4
 1203 0028 00000000 		.4byte	.LFB5
 1204 002c 20000000 		.4byte	.LFE5
 1205 0030 00000000 		.4byte	.LFB6
 1206 0034 20000000 		.4byte	.LFE6
 1207 0038 00000000 		.4byte	.LFB7
 1208 003c 20000000 		.4byte	.LFE7
 1209 0040 00000000 		.4byte	.LFB8
 1210 0044 1C000000 		.4byte	.LFE8
 1211 0048 00000000 		.4byte	.LFB9
 1212 004c 20000000 		.4byte	.LFE9
 1213 0050 00000000 		.4byte	.LFB10
 1214 0054 18000000 		.4byte	.LFE10
 1215 0058 00000000 		.4byte	.LFB11
 1216 005c 18000000 		.4byte	.LFE11
 1217 0060 00000000 		.4byte	.LFB12
 1218 0064 18000000 		.4byte	.LFE12
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 38


 1219 0068 00000000 		.4byte	0
 1220 006c 00000000 		.4byte	0
 1221              		.section	.debug_line,"",%progbits
 1222              	.Ldebug_line0:
 1223 0000 45010000 		.section	.debug_str,"MS",%progbits,1
 1223      02004100 
 1223      00000201 
 1223      FB0E0D00 
 1223      01010101 
 1224              	.LASF15:
 1225 0000 72656731 		.ascii	"reg16\000"
 1225      3600
 1226              	.LASF21:
 1227 0006 56455254 		.ascii	"VERT_Init\000"
 1227      5F496E69 
 1227      7400
 1228              	.LASF36:
 1229 0010 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1229      43313120 
 1229      352E342E 
 1229      31203230 
 1229      31363036 
 1230 0043 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1230      20726576 
 1230      6973696F 
 1230      6E203233 
 1230      37373135 
 1231 0076 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1231      66756E63 
 1231      74696F6E 
 1231      2D736563 
 1231      74696F6E 
 1232              	.LASF22:
 1233 009e 56455254 		.ascii	"VERT_WriteCounter\000"
 1233      5F577269 
 1233      7465436F 
 1233      756E7465 
 1233      7200
 1234              	.LASF25:
 1235 00b0 70657269 		.ascii	"period\000"
 1235      6F6400
 1236              	.LASF3:
 1237 00b7 73686F72 		.ascii	"short unsigned int\000"
 1237      7420756E 
 1237      7369676E 
 1237      65642069 
 1237      6E7400
 1238              	.LASF32:
 1239 00ca 56455254 		.ascii	"VERT_ReadCounter\000"
 1239      5F526561 
 1239      64436F75 
 1239      6E746572 
 1239      00
 1240              	.LASF11:
 1241 00db 666C6F61 		.ascii	"float\000"
 1241      7400
 1242              	.LASF24:
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 39


 1243 00e1 636F756E 		.ascii	"counter\000"
 1243      74657200 
 1244              	.LASF1:
 1245 00e9 756E7369 		.ascii	"unsigned char\000"
 1245      676E6564 
 1245      20636861 
 1245      7200
 1246              	.LASF14:
 1247 00f7 72656738 		.ascii	"reg8\000"
 1247      00
 1248              	.LASF20:
 1249 00fc 56455254 		.ascii	"VERT_Stop\000"
 1249      5F53746F 
 1249      7000
 1250              	.LASF5:
 1251 0106 6C6F6E67 		.ascii	"long unsigned int\000"
 1251      20756E73 
 1251      69676E65 
 1251      6420696E 
 1251      7400
 1252              	.LASF9:
 1253 0118 75696E74 		.ascii	"uint8\000"
 1253      3800
 1254              	.LASF31:
 1255 011e 636F6E74 		.ascii	"control\000"
 1255      726F6C00 
 1256              	.LASF40:
 1257 0126 56455254 		.ascii	"VERT_initVar\000"
 1257      5F696E69 
 1257      74566172 
 1257      00
 1258              	.LASF38:
 1259 0133 433A5C55 		.ascii	"C:\\Users\\Ahmad Negm\\Desktop\\6.115\\FP\\psoc_vga"
 1259      73657273 
 1259      5C41686D 
 1259      6164204E 
 1259      65676D5C 
 1260 0160 5F70726F 		.ascii	"_project final\\vga.cydsn\000"
 1260      6A656374 
 1260      2066696E 
 1260      616C5C76 
 1260      67612E63 
 1261              	.LASF12:
 1262 0179 646F7562 		.ascii	"double\000"
 1262      6C6500
 1263              	.LASF39:
 1264 0180 56455254 		.ascii	"VERT_ReadControlRegister\000"
 1264      5F526561 
 1264      64436F6E 
 1264      74726F6C 
 1264      52656769 
 1265              	.LASF35:
 1266 0199 56455254 		.ascii	"VERT_ReadPeriod\000"
 1266      5F526561 
 1266      64506572 
 1266      696F6400 
 1267              	.LASF10:
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 40


 1268 01a9 75696E74 		.ascii	"uint16\000"
 1268      313600
 1269              	.LASF19:
 1270 01b0 56455254 		.ascii	"VERT_Enable\000"
 1270      5F456E61 
 1270      626C6500 
 1271              	.LASF8:
 1272 01bc 756E7369 		.ascii	"unsigned int\000"
 1272      676E6564 
 1272      20696E74 
 1272      00
 1273              	.LASF7:
 1274 01c9 6C6F6E67 		.ascii	"long long unsigned int\000"
 1274      206C6F6E 
 1274      6720756E 
 1274      7369676E 
 1274      65642069 
 1275              	.LASF29:
 1276 01e0 72657375 		.ascii	"result\000"
 1276      6C7400
 1277              	.LASF23:
 1278 01e7 56455254 		.ascii	"VERT_WritePeriod\000"
 1278      5F577269 
 1278      74655065 
 1278      72696F64 
 1278      00
 1279              	.LASF37:
 1280 01f8 47656E65 		.ascii	"Generated_Source\\PSoC5\\VERT.c\000"
 1280      72617465 
 1280      645F536F 
 1280      75726365 
 1280      5C50536F 
 1281              	.LASF17:
 1282 0216 73697A65 		.ascii	"sizetype\000"
 1282      74797065 
 1282      00
 1283              	.LASF6:
 1284 021f 6C6F6E67 		.ascii	"long long int\000"
 1284      206C6F6E 
 1284      6720696E 
 1284      7400
 1285              	.LASF26:
 1286 022d 56455254 		.ascii	"VERT_WriteCompare\000"
 1286      5F577269 
 1286      7465436F 
 1286      6D706172 
 1286      6500
 1287              	.LASF18:
 1288 023f 56455254 		.ascii	"VERT_Start\000"
 1288      5F537461 
 1288      727400
 1289              	.LASF2:
 1290 024a 73686F72 		.ascii	"short int\000"
 1290      7420696E 
 1290      7400
 1291              	.LASF34:
 1292 0254 56455254 		.ascii	"VERT_ReadCompare\000"
ARM GAS  C:\Users\AHMADN~1\AppData\Local\Temp\ccGPMrch.s 			page 41


 1292      5F526561 
 1292      64436F6D 
 1292      70617265 
 1292      00
 1293              	.LASF30:
 1294 0265 56455254 		.ascii	"VERT_WriteControlRegister\000"
 1294      5F577269 
 1294      7465436F 
 1294      6E74726F 
 1294      6C526567 
 1295              	.LASF28:
 1296 027f 6374726C 		.ascii	"ctrl\000"
 1296      00
 1297              	.LASF33:
 1298 0284 56455254 		.ascii	"VERT_ReadCapture\000"
 1298      5F526561 
 1298      64436170 
 1298      74757265 
 1298      00
 1299              	.LASF4:
 1300 0295 6C6F6E67 		.ascii	"long int\000"
 1300      20696E74 
 1300      00
 1301              	.LASF13:
 1302 029e 63686172 		.ascii	"char\000"
 1302      00
 1303              	.LASF16:
 1304 02a3 6C6F6E67 		.ascii	"long double\000"
 1304      20646F75 
 1304      626C6500 
 1305              	.LASF0:
 1306 02af 7369676E 		.ascii	"signed char\000"
 1306      65642063 
 1306      68617200 
 1307              	.LASF27:
 1308 02bb 636F6D70 		.ascii	"compare\000"
 1308      61726500 
 1309              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
